package gob.servir.desempenio.bean;

import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.UsuarioService;

import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

/**
 * 
 * @author Hever Pumallihua
 */
@ContextConfiguration("/test-context.xml")
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class UsuarioTest {

	@Autowired
	private UsuarioService usuarioService;
	
	// inicializar data
	@Before
	public void prepararData() {
	
		Usuario usuario1 = new Usuario();
		usuario1.setIdUsuario(1L);
		usuario1.setNombre("Hever");
		usuario1.setApPaterno("Pumallihua");
		usuario1.setApMaterno("Garcia");
		usuario1.setUsuario("hpumallihua");
		usuarioService.save(usuario1);

		Usuario usuario2 = new Usuario();
		usuario2.setIdUsuario(2L);
		usuario2.setNombre("Alberto");
		usuario2.setApPaterno("Munguia");
		usuario2.setApMaterno("Martinez");
		usuario2.setUsuario("cmunguia");
		usuarioService.save(usuario2);
	}

	@Test
	public void deberiaGuardarUsuario() {
		// Arrange - Preparar
		Usuario usuario3 = new Usuario();
		usuario3.setIdUsuario(3L);
		usuario3.setNombre("Jeronimo");
		usuario3.setApPaterno("Medina");
		usuario3.setApMaterno("Huaman");
		usuario3.setUsuario("jmedina");

		// Act - Actuar
		Usuario usuarioResp = usuarioService.save(usuario3);

		// Assert - Afirmar
		Assert.assertNotNull(usuarioResp);
	}

	@Test
	public void deberiaModificarUsuario() {
		// Arrange - Preparar
		Usuario usuario1 = new Usuario();
		usuario1.setIdUsuario(1L);
		usuario1.setNombre("Hever modificado");

		// Act - Actuar
		Usuario usuarioResp = usuarioService.edit(usuario1);

		// Assert - Afirmar
		Assert.assertFalse("el nombre deberia haber cambiado", usuarioResp.getNombre().equals("Hever"));
	}
	
	@Test
	public void deberiaBuscarUsuarioPorId() {
		// Arrange - Preparar
		Long id = 1L;
		Usuario usuarioResp = null;
		
		// Act - Actuar
		usuarioResp = usuarioService.find(id);
		
		// Assert - Afirmar
		Assert.assertNotNull("No deberia ser null",usuarioResp);
	}

	@Test
	public void deberiaListarUsuarios() {
		// Arrange - Preparar
		List<Usuario> listaUsuarios = null;
		
		// Act - Actuar
		listaUsuarios = usuarioService.getListaUsuario();
		
		// Assert - Afirmar
		Assert.assertEquals(2, listaUsuarios.size());
	}

}
