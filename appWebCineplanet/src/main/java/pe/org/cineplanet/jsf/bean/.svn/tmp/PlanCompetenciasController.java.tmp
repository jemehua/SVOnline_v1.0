package gob.servir.desempenio.controller;

import gob.servir.desempenio.bean.DataModelPlanDesarrollo;
import gob.servir.desempenio.model.Campania;
import gob.servir.desempenio.model.DetalleFlujo;
import gob.servir.desempenio.model.DetalleFlujoPK;
import gob.servir.desempenio.model.EvaluacionInicial;
import gob.servir.desempenio.model.EvaluacionInicialPK;
import gob.servir.desempenio.model.Inscripcion;
import gob.servir.desempenio.model.PlanDesarrollo;
import gob.servir.desempenio.model.PlanDesarrolloPK;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.CampaniaService;
import gob.servir.desempenio.service.DetalleFlujoService;
import gob.servir.desempenio.service.EvaluacionInicialService;
import gob.servir.desempenio.service.FlujoService;
import gob.servir.desempenio.service.InscripcionService;
import gob.servir.desempenio.service.PlanDesarrolloService;
import gob.servir.desempenio.util.Message;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.primefaces.event.SelectEvent;
import org.primefaces.event.UnselectEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * 
 * @author Hever Pumallihua
 */
@Component("planCompetenciasController")
@Scope("session")
public class PlanCompetenciasController {

	private static final Logger logger = LoggerFactory
			.getLogger(PlanCompetenciasController.class);

	@Autowired
	private CampaniaService campaniaService;
	@Autowired
	private InscripcionService inscripcionService;
	@Autowired
	private EvaluacionInicialService evaInicialService;
	@Autowired
	private PlanDesarrolloService planDesarrolloService;
	@Autowired
	private FlujoService flujoService;
	@Autowired
	private DetalleFlujoService detalleFlujoService;

	private EvaluacionInicial evaInicialSelec = null;
	private String competencia = "";

	private Usuario userSesion = null;
	private Message message = new Message();

	private Inscripcion inscripcion = new Inscripcion();
	private List<EvaluacionInicial> listaCompetencias = new ArrayList<EvaluacionInicial>();
	private DataModelPlanDesarrollo dataModelPlan;
	private PlanDesarrollo planDesarrollo = new PlanDesarrollo();

	private boolean swFlujo = true;
	private static final Long P1_PLAN_COMPETENCIAS = 13L;

	public PlanCompetenciasController() {
		super();
	}

	public boolean isSwFlujo() {
		if (inscripcion.getId() == null) {
			swFlujo = false;
		} else {
			DetalleFlujo detalle = detalleFlujoService.find(new DetalleFlujoPK(
					inscripcion.getId().getIdCampania(), inscripcion.getId()
							.getIdGerentePublico(), 1L, P1_PLAN_COMPETENCIAS));
			if (detalle != null) {
				if (detalle.getEstado().equalsIgnoreCase("AT"))
					swFlujo = true;
				else
					swFlujo = false;
			} else
				swFlujo = true;
		}
		//swFlujo = false;
		return swFlujo;
	}

	public void setSwFlujo(boolean swFlujo) {
		this.swFlujo = swFlujo;
	}

	public PlanDesarrollo getPlanDesarrollo() {
		return planDesarrollo;
	}

	public void setPlanDesarrollo(PlanDesarrollo planDesarrollo) {
		this.planDesarrollo = planDesarrollo;
	}

	public DataModelPlanDesarrollo getDataModelPlan() {
		listaCompetencias.clear();
		// brecha > 0
		if (inscripcion.getId() != null)
			if (inscripcion.getPuestoTipoV() != null) {
				listaCompetencias = evaInicialService
						.getListaEvaluacionInicial(inscripcion.getId()
								.getIdCampania(), inscripcion.getPuestoTipoV()
								.getId_puesto_tipo(), inscripcion.getId()
								.getIdGerentePublico(), 2);
			}

		dataModelPlan = new DataModelPlanDesarrollo(listaCompetencias);

		return dataModelPlan;
	}

	public void setDataModelPlan(DataModelPlanDesarrollo dataModelPlan) {
		this.dataModelPlan = dataModelPlan;
	}

	public String getCompetencia() {

		if (evaInicialSelec != null)
			competencia = evaInicialSelec.getCompetencia().getCompetencia()
					.getDenominacion();

		return competencia;
	}

	public void setCompetencia(String competencia) {
		this.competencia = competencia;
	}

	public EvaluacionInicial getEvaInicialSelec() {
		return evaInicialSelec;
	}

	public void setEvaInicialSelec(EvaluacionInicial evaInicialSelec) {
		this.evaInicialSelec = evaInicialSelec;
	}

	public Inscripcion getInscripcion() {

		validarSesion();
		List<Campania> listaCampania = campaniaService
				.getListaEstadoCampania("Activo");
		for (Campania campania : listaCampania) {
			Inscripcion inscripcion00 = inscripcionService
					.getInscripcionCampaña(campania.getIdCampania(), userSesion);
			if (inscripcion00 != null)
				inscripcion = inscripcion00;

		}

		return inscripcion;
	}

	public void setInscripcion(Inscripcion inscripcion) {
		this.inscripcion = inscripcion;
	}

	public List<EvaluacionInicial> getListaCompetencias() {
		return listaCompetencias;
	}

	public void setListaCompetencias(List<EvaluacionInicial> listaCompetencias) {
		this.listaCompetencias = listaCompetencias;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get("userSesion");

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public void guardar() {

		validarSesion();

		if (!validarDatos())
			return;

		PlanDesarrolloPK id = null;

		try {
			if (planDesarrollo.getId() != null) {

				planDesarrollo.setFechaModificacion(new Date());
				planDesarrollo.setUsuarioModifica(userSesion.getUsuario());

				planDesarrolloService.edit(planDesarrollo);

			} else {

				id = new PlanDesarrolloPK(evaInicialSelec.getId()
						.getIdCompetencia(), evaInicialSelec.getId()
						.getIdCampania(), evaInicialSelec.getId()
						.getIdGerentePublico(), evaInicialSelec.getId()
						.getIdPuesto());

				// planDesarrollo = new PlanDesarrollo();
				planDesarrollo.setId(id);
				planDesarrollo.setFechaCreacion(new Date());
				planDesarrollo.setUsuarioRegistra(userSesion.getUsuario());
				planDesarrollo.setEstado("A");
				planDesarrollo.setAprobacion(true);

				planDesarrolloService.save(planDesarrollo);

			}

			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
							message.getMessage("msgRegistrar")));

		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR",
							message.getMessage("msgRegistrarError")));
		}
		limpiar();
	}

	public boolean validarDatos() {

		if (evaInicialSelec == null) {
			FacesContext
					.getCurrentInstance()
					.addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_WARN,
									"ADVERTENCIA",
									"Seleccione un registro de la lista de Competencias"));
			return false;
		}

		if (planDesarrollo.getActCapacitacion().trim().equalsIgnoreCase("")
				&& planDesarrollo.getActEntrenamiento().trim()
						.equalsIgnoreCase("")) {
			FacesContext
					.getCurrentInstance()
					.addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_WARN,
									"ADVERTENCIA",
									"Ingrese actividad de capacitación / entrenamiento"));
			return false;
		}

		if (verificarRegistroPlan() == 2) {
			FacesContext
					.getCurrentInstance()
					.addMessage(
							null,
							new FacesMessage(
									FacesMessage.SEVERITY_WARN,
									"ADVERTENCIA",
									"Solo esta permitido registrar plan de desarrollo como máximo para 2 competencias"));
			return false;
		}

		return true;
	}

	public void limpiar() {

		planDesarrollo = new PlanDesarrollo();
		evaInicialSelec = null;
		competencia = "";

	}

	public void onRowSelect(SelectEvent event) {

		EvaluacionInicialPK id = ((EvaluacionInicial) event.getObject())
				.getId();

		if (id != null) {

			PlanDesarrolloPK id00 = new PlanDesarrolloPK(id.getIdCompetencia(),
					id.getIdCampania(), id.getIdGerentePublico(),
					id.getIdPuesto());

			PlanDesarrollo plan = planDesarrolloService.find(id00);

			if (plan == null) {
				planDesarrollo = new PlanDesarrollo();
			} else {
				planDesarrollo = plan;
			}
		}
	}

	public void onRowUnselect(UnselectEvent event) {

	}

	public void atenderFlujo() {
		validarSesion();

		if (!validarAtenderFlujo())
			return;

		try {

			DetalleFlujoPK idDetalle = new DetalleFlujoPK(inscripcion.getId()
					.getIdCampania(),
					inscripcion.getId().getIdGerentePublico(), 1L,
					P1_PLAN_COMPETENCIAS);

			flujoService.atenderFlujo(idDetalle, userSesion.getUsuario());
			FacesContext
					.getCurrentInstance()
					.addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_INFO,
									"EXITO",
									"Se ha procesado el registro de plan de desarrollo de competencias"));

		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR, "ERROR",
							"Ha ocurrido un error"));
		}
	}

	public boolean validarAtenderFlujo() {

		if (inscripcion.getId() == null) {
			return false;
		}

		if (verificarRegistroPlan() == 0) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Registre su plan de desarrollo de comptencias "));
			return false;
		}

		return true;
	}

	public Integer verificarRegistroPlan() {

		List<PlanDesarrollo> listPlan = planDesarrolloService
				.getListaPlanDesarrollo(inscripcion.getId().getIdCampania(),
						inscripcion.getId().getIdGerentePublico(), inscripcion
								.getPuestoTipoV().getId_puesto_tipo());

		// if (listPlan.size() != listaCompetencias.size())
		return listPlan.size();

	}
}
