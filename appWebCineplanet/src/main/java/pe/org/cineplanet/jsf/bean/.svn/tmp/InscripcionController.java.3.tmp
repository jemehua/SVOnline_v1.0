package gob.servir.desempenio.controller;

import gob.servir.desempenio.bean.DataModelGerentePublico;
import gob.servir.desempenio.dto.InscripcionGerente;
import gob.servir.desempenio.model.AsignacionGerenteV;
import gob.servir.desempenio.model.Campania;
import gob.servir.desempenio.model.DetalleInscripcion;
import gob.servir.desempenio.model.DetalleInscripcionPK;
import gob.servir.desempenio.model.EntidadDestinoV;
import gob.servir.desempenio.model.Inscripcion;
import gob.servir.desempenio.model.InscripcionPK;
import gob.servir.desempenio.model.JefeInmediato;
import gob.servir.desempenio.model.JefeInmediatoV;
import gob.servir.desempenio.model.TitularEntidad;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.AsignacionGerenteVService;
import gob.servir.desempenio.service.CampaniaService;
import gob.servir.desempenio.service.DetalleInscripcionService;
import gob.servir.desempenio.service.EntidadDestinoVService;
import gob.servir.desempenio.service.FlujoService;
import gob.servir.desempenio.service.InscripcionService;
import gob.servir.desempenio.service.JefeInmediatoService;
import gob.servir.desempenio.service.JefeInmediatoVService;
import gob.servir.desempenio.service.PuestoTipoVService;
import gob.servir.desempenio.service.RolService;
import gob.servir.desempenio.service.TitularEntidadService;
import gob.servir.desempenio.service.UsuarioService;
import gob.servir.desempenio.util.Constantes;
import gob.servir.desempenio.util.Message;
import gob.servir.desempenio.util.StringUtils;
import gob.servir.desempenio.util.TemplateReporteServir;

import java.awt.Color;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.HeaderFooter;
import com.lowagie.text.PageSize;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.GrayColor;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

/**
 * 
 * @author Hever Pumallihua Garcia
 */
@Component("inscripcionController")
@Scope("session")
public class InscripcionController {

	private static final Logger logger = LoggerFactory
			.getLogger(InscripcionController.class);

	// private static final DataTable TemplateReporteItext = null;

	private Message message = new Message();

	@Autowired
	private AsignacionGerenteVService asignacionGerenteVService;
	@Autowired
	private JefeInmediatoVService jefeInmediatoVService;
	@Autowired
	private DetalleInscripcionService detalleInsService;
	@Autowired
	private PuestoTipoVService puestoTipoVService;
	@Autowired
	private EntidadDestinoVService entidadDestinoService;
	@Autowired
	private TitularEntidadService titularEntidadService;
	@Autowired
	private UsuarioService usuarioService;
	@Autowired
	private CampaniaService campaniaService;
	@Autowired
	private InscripcionService inscripcionService;
	@Autowired
	private JefeInmediatoService jefeInmediatoService;
	@Autowired
	private RolService rolService;
	@Autowired
	private FlujoService flujoService;

	private AsignacionGerenteV asigGerenteSelec = null;
	private Usuario userSesion = null;

	private Long campaniaSelec = 0L;

	private List<InscripcionGerente> listaInscripciones = new ArrayList<InscripcionGerente>();

	// 1GP
	private List<AsignacionGerenteV> listaAsignacion = new ArrayList<AsignacionGerenteV>();
	private boolean swBtnBuscar = true;
	// + de 1 GP
	private DataModelGerentePublico dataModelGerentePublico = null;
	private List<AsignacionGerenteV> listaGerentePublicoSelec = new ArrayList<AsignacionGerenteV>();
	private List<AsignacionGerenteV> listaGerentePublicoSelec2 = new ArrayList<AsignacionGerenteV>();
	private boolean swBtnAceptar = true;
	private boolean swGuardarVar = true;

	// datos de la ins selec
	private InscripcionGerente inscripcionSelec = null;

	// JI
	private JefeInmediato modificarJefeInmediato = new JefeInmediato();
	private boolean swEditarJefe = false;// true:modificar false:nuevo

	// TE
	private TitularEntidad nuevoTitular = new TitularEntidad();
	private boolean swEditarTitular = false;// true:modificar false:nuevo

	public InscripcionController() {
	}

	public AsignacionGerenteV getAsigGerenteSelec() {
		return asigGerenteSelec;
	}

	public void setAsigGerenteSelec(AsignacionGerenteV asigGerenteSelec) {
		this.asigGerenteSelec = asigGerenteSelec;
	}

	public List<AsignacionGerenteV> getListaAsignacion() {
		listaAsignacion.clear();
		listaAsignacion = asignacionGerenteVService.getListaAsignacionGerente();
		return listaAsignacion;
	}

	public void setListaAsignacion(List<AsignacionGerenteV> listaAsignacion) {
		this.listaAsignacion = listaAsignacion;
	}

	public TitularEntidad getNuevoTitular() {
		return nuevoTitular;
	}

	public void setNuevoTitular(TitularEntidad nuevoTitular) {
		this.nuevoTitular = nuevoTitular;
	}

	public boolean isSwGuardarVar() {
		return swGuardarVar;
	}

	public void setSwGuardarVar(boolean swGuardarVar) {
		this.swGuardarVar = swGuardarVar;
	}

	public boolean isSwBtnAceptar() {
		return swBtnAceptar;
	}

	public void setSwBtnAceptar(boolean swBtnAceptar) {
		this.swBtnAceptar = swBtnAceptar;
	}

	public List<AsignacionGerenteV> getListaGerentePublicoSelec() {
		return listaGerentePublicoSelec;
	}

	public void setListaGerentePublicoSelec(
			List<AsignacionGerenteV> listaGerentePublicoSelec) {
		this.listaGerentePublicoSelec = listaGerentePublicoSelec;
	}

	public List<AsignacionGerenteV> getListaGerentePublicoSelec2() {
		return listaGerentePublicoSelec2;
	}

	public void setListaGerentePublicoSelec2(
			List<AsignacionGerenteV> listaGerentePublicoSelec2) {
		this.listaGerentePublicoSelec2 = listaGerentePublicoSelec2;
	}

	public DataModelGerentePublico getDataModelGerentePublico() {
		List<AsignacionGerenteV> listaGerentePublicoDM = asignacionGerenteVService
				.getListaAsignacionGerente();
		dataModelGerentePublico = new DataModelGerentePublico(
				listaGerentePublicoDM);
		return dataModelGerentePublico;
	}

	public void setDataModelGerentePublico(
			DataModelGerentePublico dataModelGerentePublico) {
		this.dataModelGerentePublico = dataModelGerentePublico;
	}

	public boolean isSwBtnBuscar() {
		if (campaniaSelec != 0L)
			swBtnBuscar = false;
		else
			swBtnBuscar = true;
		return swBtnBuscar;
	}

	public void setSwBtnBuscar(boolean swBtnBuscar) {
		this.swBtnBuscar = swBtnBuscar;
	}

	public JefeInmediato getModificarJefeInmediato() {
		return modificarJefeInmediato;
	}

	public void setModificarJefeInmediato(JefeInmediato modificarJefeInmediato) {
		this.modificarJefeInmediato = modificarJefeInmediato;
	}

	// mod hever
	public List<InscripcionGerente> getListaInscripciones() {
		listaInscripciones.clear();

		if (campaniaSelec != 0L)
			listaInscripciones = detalleInsService
					.getListaInscripcion(campaniaSelec);

		return listaInscripciones;
	}

	public void setListaInscripciones(
			List<InscripcionGerente> listaInscripciones) {
		this.listaInscripciones = listaInscripciones;
	}

	public Long getCampaniaSelec() {
		return campaniaSelec;
	}

	public void setCampaniaSelec(Long campaniaSelec) {
		this.campaniaSelec = campaniaSelec;
	}

	public List<SelectItem> getComboCampania() {
		return campaniaService.getComboCampania();
	}

	public void setComboCampania(List<SelectItem> comboCampania) {
	}

	public void guardar() {
		if (swGuardarVar == true)
			guardarInsGp();
		else {
			guardarInscripciones();
		}
	}

	public void guardarInsGp() {

		validarSesion();

		if (!validarDatos())
			return;

		try {
			// Inscripcion
			InscripcionPK inscripcionPK = new InscripcionPK(campaniaSelec,
					asigGerenteSelec.getCod_gerente());

			Inscripcion nuevaInscripcion = new Inscripcion();
			nuevaInscripcion.setId(inscripcionPK);

			if (asigGerenteSelec.getId_puesto_tipo_principal() != null)
				nuevaInscripcion.setPuestoTipoV(puestoTipoVService
						.find(asigGerenteSelec.getId_puesto_tipo_principal()));

			nuevaInscripcion.setEstadoEvaInicial(Constantes.PENDIENTE);
			nuevaInscripcion.setEstadoMetas(Constantes.PENDIENTE);
			nuevaInscripcion.setEstadoPlanes(Constantes.PENDIENTE);
			nuevaInscripcion.setEstadoModificacionPlan(Constantes.FALSE);
			nuevaInscripcion.setEstado(Constantes.ACTIVO);
			nuevaInscripcion.setTeAndJi(Constantes.FALSE);
			nuevaInscripcion.setFechaCreacion(new Date());
			nuevaInscripcion.setUsuarioRegistra(userSesion.getUsuario());

			nuevaInscripcion.setAsignacionGerenteV(asigGerenteSelec);
			nuevaInscripcion.setIdAsignacion(asigGerenteSelec
					.getId_asignacion());

			DetalleInscripcionPK id = new DetalleInscripcionPK(
					detalleInsService.getMaxId(), campaniaSelec,
					asigGerenteSelec.getCod_gerente());

			// DetalleInsc
			DetalleInscripcion detalle = new DetalleInscripcion();
			detalle.setId(id);

			// Jefe Inmediato
			if (asigGerenteSelec.getId_jefe_inmediato() != null) {
				JefeInmediatoV ji = jefeInmediatoVService.find(asigGerenteSelec
						.getId_jefe_inmediato());
				if (ji != null)
					detalle.setJefeInmediatoV(ji);
			}

			// Entidad Destino
			if (asigGerenteSelec.getId_ed() != null)
				detalle.setEntidadDestinoV(entidadDestinoService
						.find(asigGerenteSelec.getId_ed()));

			detalle.setEstado("A");
			detalle.setFechaCreacion(new Date());
			detalle.setUsuarioRegistra(userSesion.getUsuario());

			detalle.setInscripcion(nuevaInscripcion);

			detalleInsService.saveTotal(detalle);

			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
							"Registro exitoso"));

			limpiar();

		} catch (Exception e) {
			logger.info("ERRROR AL REGISTRAR USUARIO");
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							"Error al registrar"));
		}

	}

	public void guardarInscripciones() {

		validarSesion();

		try {

			for (AsignacionGerenteV asignacionGerenteV : listaGerentePublicoSelec2) {

				// Inscripcion
				InscripcionPK inscripcionPK = new InscripcionPK(campaniaSelec,
						asignacionGerenteV.getCod_gerente());

				Inscripcion nuevaInscripcion = new Inscripcion();
				nuevaInscripcion.setId(inscripcionPK);

				if (asignacionGerenteV.getId_puesto_tipo_principal() != null)
					nuevaInscripcion.setPuestoTipoV(puestoTipoVService
							.find(asignacionGerenteV
									.getId_puesto_tipo_principal()));

				nuevaInscripcion.setEstadoEvaInicial(Constantes.PENDIENTE);
				nuevaInscripcion.setEstadoMetas(Constantes.PENDIENTE);
				nuevaInscripcion.setEstadoPlanes(Constantes.PENDIENTE);
				nuevaInscripcion.setEstadoModificacionPlan(Constantes.FALSE);
				nuevaInscripcion.setEstado(Constantes.ACTIVO);
				nuevaInscripcion.setTeAndJi(Constantes.FALSE);
				nuevaInscripcion.setFechaCreacion(new Date());
				nuevaInscripcion.setUsuarioRegistra(userSesion.getUsuario());

				nuevaInscripcion.setAsignacionGerenteV(asignacionGerenteV);
				nuevaInscripcion.setIdAsignacion(asignacionGerenteV
						.getId_asignacion());

				DetalleInscripcionPK id = new DetalleInscripcionPK(
						detalleInsService.getMaxId(), campaniaSelec,
						asignacionGerenteV.getCod_gerente());

				// DetalleInsc
				DetalleInscripcion detalle = new DetalleInscripcion();
				detalle.setId(id);

				// Jefe Inmediato
				if (asignacionGerenteV.getId_jefe_inmediato() != null) {
					JefeInmediatoV ji = jefeInmediatoVService
							.find(asignacionGerenteV.getId_jefe_inmediato());
					if (ji != null)
						detalle.setJefeInmediatoV(ji);
				}

				// Entidad Destino
				if (asignacionGerenteV.getId_ed() != null)
					detalle.setEntidadDestinoV(entidadDestinoService
							.find(asignacionGerenteV.getId_ed()));

				detalle.setEstado("A");
				detalle.setFechaCreacion(new Date());
				detalle.setUsuarioRegistra(userSesion.getUsuario());

				detalle.setInscripcion(nuevaInscripcion);

				detalleInsService.saveTotal(detalle);
			}

			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
							"Registro exitoso"));

			limpiar();

		} catch (Exception e) {
			logger.info("ERRROR AL REGISTRAR USUARIO");
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							"Error al registrar"));
		}

	}

	public void limpiar() {

		modificarJefeInmediato = new JefeInmediato();
		nuevoTitular = new TitularEntidad();
		inscripcionSelec = null;
		asigGerenteSelec = null;
		swGuardarVar = true;
	}

	public void limpiarTodo() {
		campaniaSelec = 0L;
		swGuardarVar = true;
		asigGerenteSelec = null;
		inscripcionSelec = null;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get("userSesion");

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public boolean validarDatos() {

		if (campaniaSelec.equals(0L)) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Seleccione Campaña de Evaluación"));
			return false;
		}

		if (asigGerenteSelec == null) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Seleccione Gerente Público"));
			return false;
		}

		if (verificarInscripcionGp()) {
			FacesContext
					.getCurrentInstance()
					.addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_WARN,
									"ADVERTENCIA",
									"El Gerente Público ya se encuentra inscrito en una campaña activa"));
			return false;
		}

		return true;
	}

	public boolean verificarInscripcionGp() {
		boolean rpta = false;
		// List<Campania> listCampaniaActiva =
		// campaniaService.getListaEstadoCampania("Activo");

		List<Inscripcion> listaIns = inscripcionService
				.getListaInscripcionActivo(asigGerenteSelec.getCod_gerente());

		for (Inscripcion row : listaIns) {

			String anioCamp = inscripcionService
					.validarInscripcion(row.getId());

			if (anioCamp != null) {

				Campania camActual = campaniaService.find(campaniaSelec);

				if (Integer.parseInt(anioCamp) >= Integer.parseInt(camActual
						.getAnio())) {
					rpta = true;
					break;
				}
			}
		}

		return rpta;
	}

	// verificar
	public void verificarGerentesPublicos() {

		listaGerentePublicoSelec2.clear();
		try {
			for (AsignacionGerenteV gerente : listaGerentePublicoSelec) {

				List<Inscripcion> listaIns = inscripcionService
						.getListaInscripcionActivo(gerente.getCod_gerente());

				if (listaIns.size() > 0) {
					boolean swverificar = true;
					for (Inscripcion row : listaIns) {
						String anioCamp = inscripcionService
								.validarInscripcion(row.getId());
						Campania camActual = campaniaService
								.find(campaniaSelec);
						if (anioCamp != null) {
							if (Integer.parseInt(anioCamp) < Integer
									.parseInt(camActual.getAnio()))
								swverificar = true;
							else {
								swverificar = false;
								break;
							}
						} else
							swverificar = true;
					}
					if (swverificar)
						listaGerentePublicoSelec2.add(gerente);
				} else {
					listaGerentePublicoSelec2.add(gerente);
				}
			}
		} catch (Exception e) {
		}

		if (listaGerentePublicoSelec2.size() > 0)
			swBtnAceptar = false;
		else
			swBtnAceptar = true;
	}

	// limpiar seleccion varios GP
	public void borrarSeleccionados() {

		listaGerentePublicoSelec.clear();
		listaGerentePublicoSelec2.clear();
		swBtnAceptar = true;
		swGuardarVar = true;

	}

	public void aceptarVerificacion() {
		listaGerentePublicoSelec.clear();
		swBtnAceptar = true;
		swGuardarVar = false;
		asigGerenteSelec = null;

		guardar();

		// FacesContext
		// .getCurrentInstance()
		// .addMessage(
		// null,
		// new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
		// "Se cargo gerentes publicos Seleccionados, click en Guardar"));

	}

	// crear usuario JI
	public void crearUsuarioJI(JefeInmediatoV ji, String anioCampnia)
			throws Exception {
		String username = StringUtils.userFormat(ji.getApellido_paterno())
				+ anioCampnia;
		if (usuarioService.findByUserAndPwAndRol(username,
				ji.getNumero_documento(), 4L, campaniaSelec) == null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(usuarioService.getIdMax());
			usuario.setApPaterno(ji.getApellido_paterno().toUpperCase());
			usuario.setApMaterno(ji.getApellido_materno().toUpperCase());
			usuario.setNombre(ji.getNombres().toUpperCase());
			usuario.setUsuario(username);
			usuario.setClave(ji.getNumero_documento());
			usuario.setEstado(Constantes.ACTIVO);
			usuario.setFechaCreacion(new Date());
			usuario.setUsuarioRegistra(userSesion.getUsuario());
			usuario.setDni(ji.getNumero_documento());
			if (ji.getCorreo_electronico_personal() != null) {
				usuario.setCorreo(ji.getCorreo_electronico_personal());
			} else if (ji.getCorreo_electronico_trabajo() != null) {
				usuario.setCorreo(ji.getCorreo_electronico_trabajo());
			}
			usuario.setRol(rolService.find(Constantes.ROL_JI));
			usuario.setIdCampania(campaniaSelec);
			usuarioService.save(usuario);
		}
	}

	// crear usuario JI local
	public void crearUsuarioJI(JefeInmediato ji, String anioCampnia)
			throws Exception {
		String username = StringUtils.userFormat(ji.getApPaterno())
				+ anioCampnia;
		if (usuarioService.findByUserAndPwAndRol(username, ji.getDni(), 4L,
				campaniaSelec) == null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(usuarioService.getIdMax());
			usuario.setApPaterno(ji.getApPaterno().toUpperCase());
			usuario.setApMaterno(ji.getApMaterno().toUpperCase());
			usuario.setNombre(ji.getNombres().toUpperCase());
			usuario.setUsuario(username);
			usuario.setClave(ji.getDni());
			usuario.setEstado("A");
			usuario.setFechaCreacion(new Date());
			usuario.setUsuarioRegistra(userSesion.getUsuario());
			usuario.setDni(ji.getDni());
			if (ji.getCorreo1() != null) {
				usuario.setCorreo(ji.getCorreo1());
			} else if (ji.getCorreo2() != null) {
				usuario.setCorreo(ji.getCorreo2());
			}
			usuario.setRol(rolService.find(4L));
			usuario.setIdCampania(campaniaSelec);
			usuarioService.save(usuario);
		}
	}

	// crear usuario TE
	public void crearUsuarioTE(EntidadDestinoV ed, String anioCampnia)
			throws Exception {
		String username3 = StringUtils.userFormat(ed.getTe_apellido_paterno())
				+ anioCampnia;
		if (usuarioService.findByUserAndPwAndRol(username3,
				ed.getTe_numero_documento(), 5L, campaniaSelec) == null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(usuarioService.getIdMax());
			usuario.setApPaterno(ed.getTe_apellido_paterno());
			usuario.setApMaterno(ed.getTe_apellido_materno());
			usuario.setNombre(ed.getTe_nombres());
			usuario.setUsuario(username3);
			usuario.setClave(ed.getTe_numero_documento());
			usuario.setEstado("A");
			usuario.setFechaCreacion(new Date());
			usuario.setUsuarioRegistra(userSesion.getUsuario());
			usuario.setDni(ed.getTe_numero_documento());
			if (ed.getTe_correo_electronico_personal() != null) {
				usuario.setCorreo(ed.getTe_correo_electronico_personal());
			} else if (ed.getTe_correo_electronico_trabajo() != null) {
				usuario.setCorreo(ed.getTe_correo_electronico_trabajo());
			}
			usuario.setRol(rolService.find(5L));
			usuario.setIdCampania(campaniaSelec);
			usuarioService.save(usuario);
		}
	}

	// crear usuario TE local
	public void crearUsuarioTE(TitularEntidad ed, String anioCampnia)
			throws Exception {
		String username3 = StringUtils.userFormat(ed.getApPaterno())
				+ anioCampnia;
		if (usuarioService.findByUserAndPwAndRol(username3, ed.getNroDocTE(),
				5L, campaniaSelec) == null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(usuarioService.getIdMax());
			usuario.setApPaterno(ed.getApPaterno());
			usuario.setApMaterno(ed.getApMaterno());
			usuario.setNombre(ed.getNombres());
			usuario.setUsuario(username3);
			usuario.setClave(ed.getNroDocTE());
			usuario.setEstado("A");
			usuario.setFechaCreacion(new Date());
			usuario.setUsuarioRegistra(userSesion.getUsuario());
			usuario.setDni(ed.getNroDocTE());
			if (ed.getCorreoPersonal() != null) {
				usuario.setCorreo(ed.getCorreoPersonal());
			} else if (ed.getCorreoTrabajo() != null) {
				usuario.setCorreo(ed.getCorreoTrabajo());
			}
			usuario.setRol(rolService.find(5L));
			usuario.setIdCampania(campaniaSelec);
			usuarioService.save(usuario);
		}
	}

	// by hever
	public void actualizarJI(InscripcionGerente insGerente) {

		validarSesion();

		DetalleInscripcion detInscripcion;
		DetalleInscripcionPK detInscripcionPK;
		EntidadDestinoV entidadDestinoV = null;
		TitularEntidad titularEntidad = null;

		try {

			AsignacionGerenteV asignacion = asignacionGerenteVService
					.find(insGerente.getCodGerente());
			Campania campania = campaniaService.find(campaniaSelec);

			if (asignacion == null)
				return;

			// JI
			if (asignacion.getId_jefe_inmediato() != null) {
				JefeInmediatoV ji = jefeInmediatoVService.find(asignacion
						.getId_jefe_inmediato());
				if (ji != null) {
					detInscripcion = detalleInsService.getDetalleInscripcion(
							insGerente.getIdCamapnia(),
							insGerente.getCodGerente());

					if (insGerente.getCodJefe() != null) {
						if (insGerente.getCodJefe() != asignacion
								.getId_jefe_inmediato()) {
							// si cambio de JI
							detInscripcion.setEstado("I");

							if (detInscripcion.getEntidadDestinoV() != null)
								entidadDestinoV = detInscripcion
										.getEntidadDestinoV();
							if (detInscripcion.getTitularEntidad() != null)
								titularEntidad = detInscripcion
										.getTitularEntidad();

							detalleInsService.edit(detInscripcion);

							detInscripcionPK = new DetalleInscripcionPK(
									detalleInsService.getMaxId(),
									insGerente.getIdCamapnia(),
									insGerente.getCodGerente());
							detInscripcion = new DetalleInscripcion();
							detInscripcion.setId(detInscripcionPK);
							detInscripcion.setEstado(Constantes.ACTIVO);
							detInscripcion.setFechaCreacion(new Date());
							detInscripcion.setUsuarioRegistra(userSesion
									.getUsuario());

							// JI
							detInscripcion.setJefeInmediatoV(ji);
							crearUsuarioJI(ji,
									campania.getAnio() + campania.getPostAnio());

							if (entidadDestinoV != null)
								detInscripcion
										.setEntidadDestinoV(entidadDestinoV);
							else if (titularEntidad != null)
								detInscripcion
										.setTitularEntidad(titularEntidad);
							detalleInsService.save(detInscripcion);
						}
					} else if (insGerente.getDniJefe2() != null) {

						detInscripcion.setEstado("I");

						if (detInscripcion.getEntidadDestinoV() != null)
							entidadDestinoV = detInscripcion
									.getEntidadDestinoV();
						if (detInscripcion.getTitularEntidad() != null)
							titularEntidad = detInscripcion.getTitularEntidad();

						detalleInsService.edit(detInscripcion);

						detInscripcionPK = new DetalleInscripcionPK(
								detalleInsService.getMaxId(),
								insGerente.getIdCamapnia(),
								insGerente.getCodGerente());
						detInscripcion = new DetalleInscripcion();
						detInscripcion.setId(detInscripcionPK);
						detInscripcion.setEstado(Constantes.ACTIVO);
						detInscripcion.setFechaCreacion(new Date());
						detInscripcion.setUsuarioRegistra(userSesion
								.getUsuario());

						// JI
						detInscripcion.setJefeInmediatoV(ji);
						crearUsuarioJI(ji,
								campania.getAnio() + campania.getPostAnio());

						if (entidadDestinoV != null)
							detInscripcion.setEntidadDestinoV(entidadDestinoV);
						else if (titularEntidad != null)
							detInscripcion.setTitularEntidad(titularEntidad);
						detalleInsService.save(detInscripcion);
					} else if (insGerente.getCodJefe() == null
							&& insGerente.getDniJefe2() == null) {
						detInscripcion.setFechaModificacion(new Date());
						detInscripcion.setUsuarioModifica(userSesion
								.getUsuario());
						detInscripcion.setJefeInmediatoV(ji);
						detalleInsService.edit(detInscripcion);
						crearUsuarioJI(ji,
								campania.getAnio() + campania.getPostAnio());
					}
				}
			}

			// TE
			if (insGerente.getDniTitular() != null) {

				detInscripcion = detalleInsService.getDetalleInscripcion(
						insGerente.getIdCamapnia(), insGerente.getCodGerente());
				crearUsuarioTE(detInscripcion.getEntidadDestinoV(),
						campania.getAnio() + campania.getPostAnio());

				if (detInscripcion.getTitularEntidad() != null) {
					detInscripcion.setTitularEntidad(null);
					detalleInsService.edit(detInscripcion);
				}
			}

			// PT
			if (asignacion.getId_puesto_tipo_principal() != null) {
				Inscripcion ins = inscripcionService
						.find(new InscripcionPK(insGerente.getIdCamapnia(),
								insGerente.getCodGerente()));
				if (insGerente.getIdPuestoTipo() != null) {
					if (insGerente.getIdPuestoTipo() != asignacion
							.getId_puesto_tipo_principal()) {
						ins.setPuestoTipoV(puestoTipoVService.find(asignacion
								.getId_puesto_tipo_principal()));
						inscripcionService.edit(ins);
					}
				} else {
					ins.setPuestoTipoV(puestoTipoVService.find(asignacion
							.getId_puesto_tipo_principal()));
					inscripcionService.edit(ins);
				}
			}

			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
							"Se ha actualizado los datos del Gerente Público"));

		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							message.getMessage("msgModificarError")));
		}
	}

	// by hever
	public void cargarJI(InscripcionGerente insGerente) {

		inscripcionSelec = insGerente;

		// JI
		if (inscripcionSelec.getDniJefe2() != null) {
			modificarJefeInmediato = jefeInmediatoService.find(inscripcionSelec
					.getDniJefe2());
			swEditarJefe = true;
		} else {
			modificarJefeInmediato = new JefeInmediato();
			swEditarJefe = false;
		}

	}

	// by hever
	public void cargarTE(InscripcionGerente insGerente) {
		inscripcionSelec = insGerente;
		// TE
		if (inscripcionSelec.getDniTitular2() != null) {
			nuevoTitular = titularEntidadService.find(inscripcionSelec
					.getDniTitular2());
			swEditarTitular = true;

		} else {
			nuevoTitular = new TitularEntidad();
			swEditarTitular = false;
		}
	}

	public void eliminarInscripcion(String codGerente) {

		InscripcionPK inscripcionPK = new InscripcionPK(campaniaSelec,
				codGerente);
		if (inscripcionPK.getIdCampania() != 0L
				&& inscripcionPK.getIdGerentePublico() != null) {
			if (flujoService.isEstadoIniciado(inscripcionPK) == true) {
				inscripcionService.delete(inscripcionPK);
				FacesContext.getCurrentInstance().addMessage(
						null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
								"Se retiro la inscripcion"));
			} else {
				FacesContext.getCurrentInstance().addMessage(
						null,
						new FacesMessage(FacesMessage.SEVERITY_WARN,
								"ADVERTENCIA",
								"No se puede eliminar, ya inicio el flujo"));
			}

		}

	}

	// by hever
	public void guardarJefeInmediato() {

		validarSesion();

		if (!validarDatosJefeIn())
			return;
		// Usuario usuario = null;
		try {

			DetalleInscripcionPK detalleInscripcionPK = new DetalleInscripcionPK(
					inscripcionSelec.getIdDetalleIns(),
					inscripcionSelec.getIdCamapnia(),
					inscripcionSelec.getCodGerente());

			DetalleInscripcion detalleInscripcion = detalleInsService
					.find(detalleInscripcionPK);
			Campania campania = campaniaService.find(campaniaSelec);

			if (detalleInscripcion != null) {

				if (swEditarJefe) {

					if (detalleInscripcion.getJefeInmediato().getDni()
							.equalsIgnoreCase(modificarJefeInmediato.getDni())
							&& detalleInscripcion
									.getJefeInmediato()
									.getApPaterno()
									.equalsIgnoreCase(
											modificarJefeInmediato
													.getApPaterno())) {
						modificarJefeInmediato.setUsuarioModifica(userSesion
								.getUsuario());
						modificarJefeInmediato.setFechaModificacion(new Date());
						jefeInmediatoService.edit(modificarJefeInmediato);
					} else {
						JefeInmediato jefeInmediato = jefeInmediatoService
								.find(modificarJefeInmediato.getDni());
						if (jefeInmediato == null) {
							modificarJefeInmediato
									.setUsuarioRegistra(userSesion.getUsuario());
							modificarJefeInmediato.setFechaCreacion(new Date());
							modificarJefeInmediato.setEstado("A");
							jefeInmediatoService.save(modificarJefeInmediato);

							crearUsuarioJI(modificarJefeInmediato,
									campania.getAnio() + campania.getPostAnio());
							detalleInscripcion
									.setJefeInmediato(modificarJefeInmediato);
						} else {
							crearUsuarioJI(jefeInmediato, campania.getAnio()
									+ campania.getPostAnio());
							detalleInscripcion.setJefeInmediato(jefeInmediato);
						}
						detalleInsService.edit(detalleInscripcion);
					}
					FacesContext
							.getCurrentInstance()
							.addMessage(
									null,
									new FacesMessage(
											FacesMessage.SEVERITY_INFO,
											"EXITO", message
													.getMessage("msgModificar")));
				} else {// nuevo

					JefeInmediato jefeInmediato = jefeInmediatoService
							.find(modificarJefeInmediato.getDni());

					if (jefeInmediato == null) {
						modificarJefeInmediato.setUsuarioRegistra(userSesion
								.getUsuario());
						modificarJefeInmediato.setFechaCreacion(new Date());
						modificarJefeInmediato.setEstado("A");
						jefeInmediatoService.save(modificarJefeInmediato);

						crearUsuarioJI(modificarJefeInmediato,
								campania.getAnio() + campania.getPostAnio());

						detalleInscripcion
								.setJefeInmediato(modificarJefeInmediato);
					} else {
						crearUsuarioJI(jefeInmediato, campania.getAnio()
								+ campania.getPostAnio());
						detalleInscripcion.setJefeInmediato(jefeInmediato);
					}
					detalleInsService.edit(detalleInscripcion);
					FacesContext.getCurrentInstance().addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_INFO,
									"EXITO", "Registro exitoso"));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							message.getMessage("msgModificarError")));
		}
		limpiar();
	}

	// by hever
	public boolean validarDatosJefeIn() {

		String txtObligatorio = message.getMessage("msgTxtObligatorio");

		if (inscripcionSelec == null) {
			return false;
		}

		if (modificarJefeInmediato.getNombres().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}
		if (modificarJefeInmediato.getApPaterno().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (modificarJefeInmediato.getApMaterno().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (modificarJefeInmediato.getDni().trim().equalsIgnoreCase("")
				|| (modificarJefeInmediato.getDni().trim().length() < 8)) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (modificarJefeInmediato.getCargo().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (modificarJefeInmediato.getCelular().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (modificarJefeInmediato.getCorreo1().trim().equalsIgnoreCase("")) {

			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		} else if (!StringUtils.isValidEmail(modificarJefeInmediato
				.getCorreo1().trim())) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							"Email no es Valido"));

			return false;

		}

		return true;

	}

	// by hever
	public void guardarTitularEntidad() {

		validarSesion();

		if (!validarDatosTE())
			return;
		// Usuario usuario = null;
		try {

			DetalleInscripcionPK detalleInscripcionPK = new DetalleInscripcionPK(
					inscripcionSelec.getIdDetalleIns(),
					inscripcionSelec.getIdCamapnia(),
					inscripcionSelec.getCodGerente());

			DetalleInscripcion detalleInscripcion = detalleInsService
					.find(detalleInscripcionPK);
			Campania campania = campaniaService.find(campaniaSelec);

			if (detalleInscripcion != null) {

				if (swEditarTitular) {

					if (detalleInscripcion.getTitularEntidad().getNroDocTE()
							.equalsIgnoreCase(nuevoTitular.getNroDocTE())
							&& detalleInscripcion
									.getTitularEntidad()
									.getApPaterno()
									.equalsIgnoreCase(
											nuevoTitular.getApPaterno())) {
						nuevoTitular
								.setUsuarioModifica(userSesion.getUsuario());
						nuevoTitular.setFechaModificacion(new Date());
						titularEntidadService.edit(nuevoTitular);
					} else {
						TitularEntidad titularEntidad = titularEntidadService
								.find(nuevoTitular.getNroDocTE());

						if (titularEntidad == null) {
							nuevoTitular.setUsuarioRegistra(userSesion
									.getUsuario());
							nuevoTitular.setFechaCreacion(new Date());
							nuevoTitular.setEstado("A");
							titularEntidadService.save(nuevoTitular);
							crearUsuarioTE(nuevoTitular, campania.getAnio()
									+ campania.getPostAnio());
							detalleInscripcion.setTitularEntidad(nuevoTitular);
						} else {
							crearUsuarioTE(titularEntidad, campania.getAnio()
									+ campania.getPostAnio());
							detalleInscripcion
									.setTitularEntidad(titularEntidad);
						}
						detalleInsService.edit(detalleInscripcion);
					}

					FacesContext
							.getCurrentInstance()
							.addMessage(
									null,
									new FacesMessage(
											FacesMessage.SEVERITY_INFO,
											"EXITO", message
													.getMessage("msgModificar")));
				} else {// nuevo

					TitularEntidad titularEntidad = titularEntidadService
							.find(nuevoTitular.getNroDocTE());

					if (titularEntidad == null) {
						nuevoTitular
								.setUsuarioRegistra(userSesion.getUsuario());
						nuevoTitular.setFechaCreacion(new Date());
						nuevoTitular.setEstado("A");
						titularEntidadService.save(nuevoTitular);
						crearUsuarioTE(nuevoTitular, campania.getAnio()
								+ campania.getPostAnio());
						detalleInscripcion.setTitularEntidad(nuevoTitular);
					} else {
						crearUsuarioTE(titularEntidad, campania.getAnio()
								+ campania.getPostAnio());
						detalleInscripcion.setTitularEntidad(titularEntidad);
					}

					detalleInsService.edit(detalleInscripcion);
					FacesContext.getCurrentInstance().addMessage(
							null,
							new FacesMessage(FacesMessage.SEVERITY_INFO,
									"EXITO", "Registro exitoso"));
				}
			}
			limpiar();
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							message.getMessage("msgModificarError")));
		}
	}

	// by hever
	public boolean validarDatosTE() {
		String txtObligatorio = message.getMessage("msgTxtObligatorio");

		if (inscripcionSelec == null) {
			return false;
		}

		if (nuevoTitular.getNombres().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}
		if (nuevoTitular.getApPaterno().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (nuevoTitular.getApMaterno().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (nuevoTitular.getNroDocTE().trim().equalsIgnoreCase("")
				|| (nuevoTitular.getNroDocTE().trim().length() < 8)) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (nuevoTitular.getCargo().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		if (nuevoTitular.getCorreoTrabajo().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		} else if (!StringUtils.isValidEmail(nuevoTitular.getCorreoTrabajo()
				.trim())) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Email no es Valido"));

			return false;

		}

		if (nuevoTitular.getCelular().trim().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							txtObligatorio));
			return false;
		}

		return true;
	}

	public void postProcessXLS(Object document) {
		HSSFWorkbook wb = (HSSFWorkbook) document;
		HSSFSheet sheet = wb.getSheetAt(0);
		HSSFRow header = sheet.getRow(0);
		HSSFCellStyle cellStyle = wb.createCellStyle();
		cellStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);

		HSSFFont font = wb.createFont();
		font.setFontName(HSSFFont.FONT_ARIAL);
		font.setFontHeightInPoints((short) 8);
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		font.setColor(HSSFColor.WHITE.index);
		cellStyle.setFillForegroundColor(IndexedColors.DARK_RED.getIndex());
		cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
		cellStyle.setFont(font);

		String tituloHeader[] = { "Cod. Gerente", "Gerente Público",
				"Puesto Tipo", "Fecha inscripción", "Entidad",
				"Jefe Inmediato", "Titular Entidad" };

		for (int i = 0; i < header.getPhysicalNumberOfCells(); i++) {
			header.getCell(i).setCellStyle(cellStyle);
			header.getCell(i).setCellValue(
					new HSSFRichTextString(tituloHeader[i]));
		}

		Iterator<Row> rowIterator = sheet.iterator();
		while (rowIterator.hasNext()) {
			Row row = rowIterator.next();
			sheet.autoSizeColumn(row.getRowNum());
		}

	}

	private StreamedContent archivoDescarga;

	public StreamedContent getArchivoDescarga() {
		return this.generarReporte();
	}

	public void setArchivoDescarga(StreamedContent archivoDescarga) {
		this.archivoDescarga = archivoDescarga;
	}

	public StreamedContent generarReporte() {
		validarSesion();
		StreamedContent pdfFile = null;
		try {

			Document document2 = new Document();
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			PdfWriter.getInstance(document2, baos);

			TemplateReporteServir reporteItext = new TemplateReporteServir();
			HeaderFooter header = reporteItext.headerServir();
			document2.setHeader(header);
			HeaderFooter footer = reporteItext.footerServir();
			document2.setFooter(footer);

			document2.open();
			document2.setPageSize(PageSize.A4);
			document2.setMargins(42.0F, 21.0F, 21.0F, 21.0F);

			PdfPTable tableSpace1 = reporteItext.tableSpace2();
			document2.add(tableSpace1);

			PdfPTable table2 = new PdfPTable(1);
			Campania campania = new Campania();
			campania = campaniaService.find(campaniaSelec);
			String CadCampania = "Campaña: " + campania.getDenominacion() + " "
					+ campania.getAnio() + " " + campania.getPostAnio();
			PdfPCell cellCampaniaDenominacion = new PdfPCell(new Phrase(
					CadCampania));
			cellCampaniaDenominacion.setHorizontalAlignment(Element.ALIGN_LEFT);
			cellCampaniaDenominacion.setBorder(Rectangle.NO_BORDER);
			table2.addCell(cellCampaniaDenominacion);
			String autor = "Generado por: " + userSesion.getNombre() + " "
					+ userSesion.getApPaterno() + " "
					+ userSesion.getApMaterno();
			PdfPCell cellAutor = new PdfPCell(new Phrase(autor));
			cellAutor.setBorder(Rectangle.NO_BORDER);
			cellAutor.setHorizontalAlignment(Element.ALIGN_LEFT);
			table2.addCell(cellAutor);
			SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy",
					new Locale("ES"));
			String fecha = "Fecha emisión: " + formatoFecha.format(new Date());
			PdfPCell cellfecha = new PdfPCell(new Phrase(fecha));
			cellfecha.setHorizontalAlignment(Element.ALIGN_LEFT);
			cellfecha.setBorder(Rectangle.NO_BORDER);
			table2.addCell(cellfecha);
			document2.add(table2);

			PdfPTable tablaSpace2 = reporteItext.tableSpace1();
			document2.add(tablaSpace2);

			Font FONT = new Font(Font.NORMAL, 8, Font.BOLD, new GrayColor(1f));
			Font FONT1 = new Font(Font.NORMAL, 8, Font.NORMAL,
					new GrayColor(0f));
			PdfPTable tablaLista = new PdfPTable(7);
			tablaLista.setHeaderRows(1);

			if (!listaInscripciones.isEmpty()) {
				PdfPCell celLista1Header = new PdfPCell(new Phrase("Cod.GP",
						FONT));
				celLista1Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista1Header);
				PdfPCell celLista2Header = new PdfPCell(new Phrase(
						"Gerente Público", FONT));
				celLista2Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista2Header);
				PdfPCell celLista3Header = new PdfPCell(new Phrase(
						"Puesto Tipo", FONT));
				celLista3Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista3Header);
				PdfPCell celLista4Header = new PdfPCell(new Phrase(
						"Inscripción", FONT));
				celLista4Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista4Header);
				PdfPCell celLista5Header = new PdfPCell(new Phrase(
						"Entidad Destino", FONT));
				celLista5Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista5Header);
				PdfPCell celLista6Header = new PdfPCell(new Phrase(
						"Jefe Inmediato", FONT));
				celLista6Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista6Header);
				PdfPCell celLista7Header = new PdfPCell(new Phrase(
						"Titular Entidad", FONT));
				celLista7Header.setBackgroundColor(Color.GRAY);
				tablaLista.addCell(celLista7Header);

				for (InscripcionGerente inscripcion : listaInscripciones) {
					PdfPCell celLista1 = new PdfPCell(new Phrase(
							inscripcion.getCodGerente(), FONT1));
					tablaLista.addCell(celLista1);
					PdfPCell celLista2 = new PdfPCell(new Phrase(
							inscripcion.getNombreGerente(), FONT1));
					tablaLista.addCell(celLista2);
					PdfPCell celLista3 = new PdfPCell(new Phrase(
							inscripcion.getPuestoTipo(), FONT1));
					tablaLista.addCell(celLista3);
					PdfPCell celLista4 = new PdfPCell(new Phrase(inscripcion
							.getFechaInscripcion().toString(), FONT1));
					tablaLista.addCell(celLista4);
					PdfPCell celLista5 = new PdfPCell(new Phrase(
							inscripcion.getNombreEntidad(), FONT1));
					tablaLista.addCell(celLista5);
					PdfPCell celLista6 = new PdfPCell(new Phrase(
							inscripcion.getNombreJefe(), FONT1));
					tablaLista.addCell(celLista6);
					PdfPCell celLista7 = new PdfPCell(new Phrase(
							inscripcion.getNombreTitular(), FONT1));
					tablaLista.addCell(celLista7);

				}
			}

			document2.add(tablaLista);

			PdfPTable tableSpace10 = reporteItext.tableSpace10();
			document2.add(tableSpace10);

			PdfPTable tablaFirma = reporteItext.tablaFirma();
			document2.add(tablaFirma);

			document2.close();

			byte[] bytes = baos.toByteArray();
			System.out.println("Bytes -> " + bytes.length);
			baos.close();

			String fileName = userSesion.getApPaterno() + ".pdf";
			pdfFile = new DefaultStreamedContent(
					new ByteArrayInputStream(bytes), "application/pdf",
					fileName);

		} catch (Exception e) {
			System.err.println("pdf error" + e.toString());
		}

		return pdfFile;
	}

}
