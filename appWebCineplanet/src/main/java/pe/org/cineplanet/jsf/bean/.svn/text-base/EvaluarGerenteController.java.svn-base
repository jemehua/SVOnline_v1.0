package gob.servir.desempenio.controller;

import gob.servir.desempenio.model.DetalleInscripcion;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.CampaniaService;
import gob.servir.desempenio.service.DetalleInscripcionService;
import gob.servir.desempenio.service.FlujoService;
import gob.servir.desempenio.service.InscripcionService;
import gob.servir.desempenio.service.MetaService;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component("evaluarGerenteController")
@Scope("session")
public class EvaluarGerenteController implements Serializable {

	private static final long serialVersionUID = 1L;
	private static final Logger logger = LoggerFactory
			.getLogger(EvaluarGerenteController.class);

	@Autowired
	private LoginController loginController;
	@Autowired
	private CampaniaService campaniaService;
	@Autowired
	private MetaService metaService;
	@Autowired
	private InscripcionService inscripcionService;
	@Autowired
	private DetalleInscripcionService detalleInscripcionService;
	@Autowired
	private FlujoService flujoService;

	private Usuario userSesion = null;
	// private Message message = new Message();

	private List<SelectItem> comboCampania = new ArrayList<SelectItem>();
	private Long campaniaSelec = 0L;

	private List<DetalleInscripcion> listaDetalleInscripcion = new ArrayList<DetalleInscripcion>();
	private boolean swRolJI = true;
	private boolean swRolTE = true;
	
	public EvaluarGerenteController() {

	}

	@PostConstruct
	public void init() {
		validarSesion();
		verificarRol();
	}

	public void verificarRol() {
		swRolJI = true;
		swRolTE = true;
		if (userSesion.getRol().getIdRol() == 4)
			swRolJI = false;
		else if (userSesion.getRol().getIdRol() == 5)
			swRolTE = false;
	}

	public boolean isSwRolJI() {
		return swRolJI;
	}

	public void setSwRolJI(boolean swRolJI) {
		this.swRolJI = swRolJI;
	}

	public boolean isSwRolTE() {
		return swRolTE;
	}

	public void setSwRolTE(boolean swRolTE) {
		this.swRolTE = swRolTE;
	}

	public List<DetalleInscripcion> getListaDetalleInscripcion() {
		validarSesion();

		listaDetalleInscripcion.clear();

		if (campaniaSelec != 0L)
			listaDetalleInscripcion = detalleInscripcionService
					.getInscripcionCampaña(campaniaSelec, userSesion);
		/*else
			listaDetalleInscripcion = detalleInscripcionService
					.getInscripcionCampaña(null, userSesion);*/

		return listaDetalleInscripcion;
	}

	public void setListaDetalleInscripcion(
			List<DetalleInscripcion> listaDetalleInscripcion) {
		this.listaDetalleInscripcion = listaDetalleInscripcion;
	}

	public List<SelectItem> getComboCampania() {
		comboCampania = campaniaService.getComboCampania();
		return comboCampania;
	}

	public void setComboCampania(List<SelectItem> comboCampania) {
		this.comboCampania = comboCampania;
	}

	public Long getCampaniaSelec() {
		return campaniaSelec;
	}

	public void setCampaniaSelec(Long campaniaSelec) {
		this.campaniaSelec = campaniaSelec;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get(loginController.getUsername());

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (Exception e) {
				//e.printStackTrace();
			}
		}
	}

	public void limpiar() {
		// inscripcionSelec = null;
	}

}
