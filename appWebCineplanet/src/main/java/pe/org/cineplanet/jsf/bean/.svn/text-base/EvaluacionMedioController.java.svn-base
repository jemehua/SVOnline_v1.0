package gob.servir.desempenio.controller;

import gob.servir.desempenio.model.Campania;
import gob.servir.desempenio.model.EvaluacionCompetencias;
import gob.servir.desempenio.model.EvaluacionMetas;
import gob.servir.desempenio.model.Inscripcion;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.report.EvaluacionMedioReport;
import gob.servir.desempenio.service.CampaniaService;
import gob.servir.desempenio.service.DetalleFlujoService;
import gob.servir.desempenio.service.EvaluacionCompetenciasService;
import gob.servir.desempenio.service.EvaluacionMetasService;
import gob.servir.desempenio.service.FlujoService;
import gob.servir.desempenio.service.InscripcionService;
import gob.servir.desempenio.service.PlanDesarrolloService;
import gob.servir.desempenio.service.PlanMetasService;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.primefaces.model.StreamedContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component("evaluacionMedioController")
@Scope("session")
public class EvaluacionMedioController implements Serializable {

	private static final long serialVersionUID = 1L;
	private static final Logger logger = LoggerFactory
			.getLogger(InscripcionController.class);

	@Autowired
	private LoginController loginController;
	@Autowired
	private CampaniaService campaniaService;
	@Autowired
	private InscripcionService inscripcionService;
	@Autowired
	private PlanMetasService planMetasService;
	@Autowired
	private PlanDesarrolloService planDesarrolloService;
	@Autowired
	private FlujoService flujoService;
	@Autowired
	private DetalleFlujoService detalleFlujoService;
	@Autowired
	private EvaluacionMetasService evaluacionMetasService;
	@Autowired
	private EvaluacionCompetenciasService evaluacionCompetenciasService;

	private List<SelectItem> comboCampania = new ArrayList<SelectItem>();
	private Long campaniaSelec = 0L;

	// Busqueda GP
	private List<Inscripcion> listaGerentePublico = new ArrayList<Inscripcion>();
	private List<Inscripcion> listaGerentePublicoFiltered = new ArrayList<Inscripcion>();
	private boolean swBtnBuscar = true;
	private Inscripcion inscripcion = null;

	private List<EvaluacionMetas> listaEvaluacionMetas = new ArrayList<EvaluacionMetas>();
	private EvaluacionMetas evaluacionMetasSelec = null;

	private EvaluacionCompetencias evaluacionCompetenciasSelec = null;
	private List<EvaluacionCompetencias> listaEvaluacionCompetencias = new ArrayList<EvaluacionCompetencias>();

	private Usuario userSesion = null;

	public EvaluacionMedioController() {
		super();
	}

	@PostConstruct
	public void init() {
		validarSesion();
	}

	public Inscripcion getInscripcion() {
		return inscripcion;
	}

	public void setInscripcion(Inscripcion inscripcion) {
		this.inscripcion = inscripcion;
	}

	public void seleccionarGerente() {

		buscarEvaluacionMetas();
		buscarEvaCompetencias();
	}

	public void limpiar() {
		inscripcion = null;
		seleccionarGerente();
	}

	public List<SelectItem> getComboCampania() {
		comboCampania = campaniaService.getComboCampania();
		return comboCampania;
	}

	public void setComboCampania(List<SelectItem> comboCampania) {
		this.comboCampania = comboCampania;
	}

	public Long getCampaniaSelec() {
		return campaniaSelec;
	}

	public void setCampaniaSelec(Long campaniaSelec) {
		this.campaniaSelec = campaniaSelec;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get(loginController.getUsername());

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (Exception e) {
				//e.printStackTrace();
			}
		}
	}

	public List<Inscripcion> getListaGerentePublicoFiltered() {
		return listaGerentePublicoFiltered;
	}

	public void setListaGerentePublicoFiltered(
			List<Inscripcion> listaGerentePublicoFiltered) {
		this.listaGerentePublicoFiltered = listaGerentePublicoFiltered;
	}

	public List<Inscripcion> getListaGerentePublico() {
		return listaGerentePublico;
	}

	public void setListaGerentePublico(List<Inscripcion> listaGerentePublico) {
		this.listaGerentePublico = listaGerentePublico;
	}

	public void buscarGerenteInscrito() {
		listaGerentePublico.clear();
		if (campaniaSelec != 0L) {

			listaGerentePublico = inscripcionService
					.getListaGerentePublico(campaniaSelec);

		}

		listaGerentePublicoFiltered = listaGerentePublico;
	}

	public boolean isSwBtnBuscar() {

		if (campaniaSelec != 0L)
			swBtnBuscar = false;
		else
			swBtnBuscar = true;

		return swBtnBuscar;
	}

	public void setSwBtnBuscar(boolean swBtnBuscar) {
		this.swBtnBuscar = swBtnBuscar;
	}

	public void buscarEvaluacionMetas() {
		listaEvaluacionMetas.clear();
		if (inscripcion != null)
			listaEvaluacionMetas = evaluacionMetasService
					.getListaEvaluacionMetas(inscripcion.getId());
		else
			init();
	}

	public List<EvaluacionMetas> getListaEvaluacionMetas() {
		return listaEvaluacionMetas;
	}

	public void setListaEvaluacionMetas(
			List<EvaluacionMetas> listaEvaluacionMetas) {
		this.listaEvaluacionMetas = listaEvaluacionMetas;
	}

	public void buscarEvaCompetencias() {
		listaEvaluacionCompetencias.clear();
		if (inscripcion != null)
			listaEvaluacionCompetencias = evaluacionCompetenciasService
					.getListaEvaluacionCompetencias(inscripcion.getId());
	}

	public List<EvaluacionCompetencias> getListaEvaluacionCompetencias() {
		return listaEvaluacionCompetencias;
	}

	public void setListaEvaluacionCompetencias(
			List<EvaluacionCompetencias> listaEvaluacionCompetencias) {
		this.listaEvaluacionCompetencias = listaEvaluacionCompetencias;
	}

	public EvaluacionMetas getEvaluacionMetasSelec() {
		return evaluacionMetasSelec;
	}

	public void setEvaluacionMetasSelec(EvaluacionMetas evaluacionMetasSelec) {
		this.evaluacionMetasSelec = evaluacionMetasSelec;
	}

	public EvaluacionCompetencias getEvaluacionCompetenciasSelec() {
		return evaluacionCompetenciasSelec;
	}

	public void setEvaluacionCompetenciasSelec(
			EvaluacionCompetencias evaluacionCompetenciasSelec) {
		this.evaluacionCompetenciasSelec = evaluacionCompetenciasSelec;
	}
	
	private StreamedContent docMedioAnio;
	
	public StreamedContent getDocMedioAnio() {
		validarSesion();
		Campania campania = campaniaService.find(campaniaSelec);
		EvaluacionMedioReport medioReport = new EvaluacionMedioReport();
		return medioReport.generarReporteAdm(campaniaSelec, campania, inscripcion, 
				listaEvaluacionMetas, listaEvaluacionCompetencias, userSesion);
	}

	public void setDocMedioAnio(StreamedContent docMedioAnio) {
		this.docMedioAnio = docMedioAnio;
	}

}
