package gob.servir.desempenio.controller;

import gob.servir.desempenio.model.Mensaje;
import gob.servir.desempenio.model.MensajePK;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.ActividadService;
import gob.servir.desempenio.service.CampaniaService;
import gob.servir.desempenio.service.MensajeService;
import gob.servir.desempenio.service.ProcesoService;
import gob.servir.desempenio.util.Message;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * 
 * @author Hever Pumallihua
 */
@Component("mensajeController")
@Scope("session")
public class MensajeController {

	private static final Logger logger = LoggerFactory
			.getLogger(MensajeController.class);

	@Autowired
	private LoginController loginController;
	@Autowired
	private ProcesoService procesoService;
	@Autowired
	private ActividadService actividadService;
	@Autowired
	private MensajeService mensajeService;
	@Autowired
	private CampaniaService campaniaService;

	private Usuario userSesion = null;
	private Message message = new Message();

	private List<SelectItem> comboCampania = new ArrayList<SelectItem>();
	private Long campaniaSelec = 0L;

	private List<SelectItem> comboProceso = new ArrayList<SelectItem>();
	private Long procesoSelec = 0L;
	private List<SelectItem> comboActividad = new ArrayList<SelectItem>();
	private Long actividadSelec = 0L;

	private Mensaje mensaje = new Mensaje();

	private List<Mensaje> listaMensaje = new ArrayList<Mensaje>();
	private boolean swEditar = false;

	public MensajeController() {
		super();
	}

	public boolean isSwEditar() {
		return swEditar;
	}

	public void setSwEditar(boolean swEditar) {
		this.swEditar = swEditar;
	}

	public List<Mensaje> getListaMensaje() {
		listaMensaje.clear();
		if (actividadSelec != 0L && procesoSelec != 0L && campaniaSelec != 0L) {
			listaMensaje = mensajeService.getListaMensaje(actividadSelec,
					procesoSelec, campaniaSelec);
		}
		return listaMensaje;
	}

	public void setListaMensaje(List<Mensaje> listaMensaje) {
		this.listaMensaje = listaMensaje;
	}

	public List<SelectItem> getComboActividad() {
		comboActividad.clear();
		if (procesoSelec != 0L)
			comboActividad = actividadService.getComboActTemp(procesoSelec);
		return comboActividad;
	}

	public void setComboActividad(List<SelectItem> comboActividad) {
		this.comboActividad = comboActividad;
	}

	public Long getActividadSelec() {
		return actividadSelec;
	}

	public void setActividadSelec(Long actividadSelec) {
		this.actividadSelec = actividadSelec;
	}

	public Long getProcesoSelec() {
		return procesoSelec;
	}

	public void setProcesoSelec(Long procesoSelec) {
		this.procesoSelec = procesoSelec;
	}

	public List<SelectItem> getComboProceso() {
		comboProceso = procesoService.getComboProceso();
		return comboProceso;
	}

	public void setComboProceso(List<SelectItem> comboProceso) {
		this.comboProceso = comboProceso;
	}

	public List<SelectItem> getComboCampania() {
		comboCampania.clear();
		comboCampania = campaniaService.getComboCampania();
		return comboCampania;
	}

	public void setComboCampania(List<SelectItem> comboCampania) {
		this.comboCampania = comboCampania;
	}

	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}

	public Long getCampaniaSelec() {
		return campaniaSelec;
	}

	public void setCampaniaSelec(Long campaniaSelec) {
		this.campaniaSelec = campaniaSelec;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get(loginController.getUsername());

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (Exception e) {
				//e.printStackTrace();
			}
		}
	}

	public void limpiar() {
		//procesoSelec = 0L;
		//actividadSelec = 0L;
		mensaje = new Mensaje();
		swEditar = false;

	}
	
	public void limpiarTodo() {
		campaniaSelec = 0L;
		procesoSelec = 0L;
		actividadSelec = 0L;
		mensaje = new Mensaje();
		swEditar = false;
	}

	public boolean validarDatos() {

		if (campaniaSelec == 0L) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Seleccione Campaña de Evaluación"));
			return false;
		}

		if (procesoSelec == 0L) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Seleccione proceso"));
			return false;
		}

		if (actividadSelec == 0L) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							"Seleccione actividad"));
			return false;
		}

		if (mensaje.getTitulo().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							message.getMessage("msgTxtObligatorio")));
			return false;
		}

		if (mensaje.getCuerpo().equalsIgnoreCase("")) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
							message.getMessage("msgTxtObligatorio")));
			return false;
		}

		return true;
	}

	public void guardarMensaje() {

		validarSesion();

		if (!validarDatos())
			return;

		try {

			if (mensaje.getId() != null) {

				mensaje.setFechaModificacion(new Date());
				mensaje.setUsuarioModifica(userSesion.getUsuario());

				mensajeService.edit(mensaje);

				FacesContext.getCurrentInstance().addMessage(
						null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
								message.getMessage("msgRegistrar")));

			} else {// nuevo
				Long idMensaje = mensajeService.getIdMax(actividadSelec,
						procesoSelec, campaniaSelec);
				
				System.out.println("idMensaje"+idMensaje);

				if (idMensaje == 1L)
					mensaje.setTipo("P");
				else
					mensaje.setTipo("S");

				MensajePK mensajePk = new MensajePK(idMensaje, actividadSelec,
						procesoSelec, campaniaSelec);

				mensaje.setId(mensajePk);

				mensaje.setEstado("A");
				mensaje.setFechaCreacion(new Date());
				mensaje.setUsuarioRegistra(userSesion.getUsuario());

				mensajeService.save(mensaje);

				FacesContext.getCurrentInstance().addMessage(
						null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
								message.getMessage("msgRegistrar")));
			}

			limpiar();

		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
							message.getMessage("msgAgregarError")));
		}
	}
	

}
