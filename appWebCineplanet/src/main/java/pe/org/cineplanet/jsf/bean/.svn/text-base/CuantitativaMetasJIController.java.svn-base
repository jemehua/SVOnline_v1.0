package gob.servir.desempenio.controller;

import gob.servir.desempenio.model.DetalleFlujoPK;
import gob.servir.desempenio.model.EvaluacionMetas;
import gob.servir.desempenio.model.Inscripcion;
import gob.servir.desempenio.model.Usuario;
import gob.servir.desempenio.service.DetalleFlujoService;
import gob.servir.desempenio.service.EvaluacionMetasService;
import gob.servir.desempenio.service.FlujoService;
import gob.servir.desempenio.service.InscripcionService;
import gob.servir.desempenio.service.PlanMetasService;
import gob.servir.desempenio.util.Constantes;
import gob.servir.desempenio.util.Message;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

/**
 * 
 * @author Hever Pumallihua
 */

@Controller("cuantitativaMetasJIController")
@Scope("session")
public class CuantitativaMetasJIController implements Serializable {

	private static final long serialVersionUID = 1L;
	private static final Logger logger = LoggerFactory
			.getLogger(CuantitativaMetasController.class);

	@Autowired
	private LoginController loginController;
	@Autowired
	private InscripcionService inscripcionService;
	@Autowired
	private PlanMetasService planMetasService;
	@Autowired
	private EvaluacionMetasService evaluacionMetasService;
	@Autowired
	private FlujoService flujoService;
	@Autowired
	private DetalleFlujoService detalleFlujoService;

	private FacesMessage msg = null;
	private Usuario userSesion = null;
	private Message message = new Message();

	private Inscripcion inscripcionSelec = null;
	private EvaluacionMetas evaluacionMetasSelec = null;
	private List<EvaluacionMetas> listaEvaluacionMetas = new ArrayList<EvaluacionMetas>();
	private boolean swFlujo = true;

	public CuantitativaMetasJIController() {

	}

	public void verificarEstadoFlujo() {
		if (inscripcionSelec == null) {
			swFlujo = false;
		} else {
			String estado = detalleFlujoService
					.getEstadoDetalleFlujo(new DetalleFlujoPK(inscripcionSelec
							.getId().getIdCampania(), inscripcionSelec.getId()
							.getIdGerentePublico(), Constantes.PROCESO3,
							Constantes.P3_CUANTITATIVA_METAS_JI));
			if (estado != null) {
				if (estado.equalsIgnoreCase(Constantes.ATENDIDO))
					swFlujo = true;
				else
					swFlujo = false;
			} else
				swFlujo = true;
		}
	}

	public boolean isSwFlujo() {
		verificarEstadoFlujo();
		return swFlujo;
	}

	public void setSwFlujo(boolean swFlujo) {
		this.swFlujo = swFlujo;
	}

	public EvaluacionMetas getEvaluacionMetasSelec() {
		return evaluacionMetasSelec;
	}

	public void setEvaluacionMetasSelec(EvaluacionMetas evaluacionMetasSelec) {
		this.evaluacionMetasSelec = evaluacionMetasSelec;
	}

	public void buscarEvaluacionMetas() {
		listaEvaluacionMetas.clear();
		if (inscripcionSelec != null)
			listaEvaluacionMetas = evaluacionMetasService
					.getListaEvaluacionMetas(inscripcionSelec.getId());
	}

	public List<EvaluacionMetas> getListaEvaluacionMetas() {
		buscarEvaluacionMetas();
		return listaEvaluacionMetas;
	}

	public void setListaEvaluacionMetas(
			List<EvaluacionMetas> listaEvaluacionMetas) {
		this.listaEvaluacionMetas = listaEvaluacionMetas;
	}

	public Inscripcion getInscripcionSelec() {
		return inscripcionSelec;
	}

	public void setInscripcionSelec(Inscripcion inscripcionSelec) {
		this.inscripcionSelec = inscripcionSelec;
	}

	public void validarSesion() {
		FacesContext context = FacesContext.getCurrentInstance();
		
		userSesion = (Usuario) context.getExternalContext().getSessionMap()
				.get(loginController.getUsername());

		if (userSesion == null) {
			String ctxPath = context.getExternalContext()
					.getRequestContextPath();
			try {
				context.getExternalContext().redirect(ctxPath + "/login.jsf");
			} catch (Exception e) {
				//e.printStackTrace();
			}
		}
	}

	public void guardar() {
		validarSesion();

		try {
			if (validarGuardar()) {
				EvaluacionMetas evaMetas = evaluacionMetasService
						.find(evaluacionMetasSelec.getId());
				evaMetas.setUsuarioJI(userSesion.getUsuario());
				evaMetas.setUsuarioModifica(userSesion.getUsuario());
				evaMetas.setNotaJI(evaluacionMetasSelec.getNotaJI());
				evaluacionMetasService.edit(evaMetas);

				msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
						message.getMessage("msgRegistrar"));
			}
		} catch (Exception e) {
			logger.info(this.getClass().getName() + ": ERROR AL GUARDAR");
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
					"Ha ocurrido un error.");
		}
		FacesContext.getCurrentInstance().addMessage(null, msg);
		limpiar();
	}

	public boolean validarGuardar() {

		if (evaluacionMetasSelec == null) {
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
					"Seleccione un registro de la lista de Metas.");
			return false;
		}

		if (evaluacionMetasSelec.getNotaJI() < 0
				|| evaluacionMetasSelec.getNotaJI() > 120) {
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
					"Ingrese evaluación anual [0 - 120].");
			return false;
		}

		return true;
	}

	public void limpiar() {
		evaluacionMetasSelec = null;
	}

	public void atenderFlujo() {

		validarSesion();

		try {
			if (validarAtenderFlujo()) {
				DetalleFlujoPK idDetalle = new DetalleFlujoPK(inscripcionSelec
						.getId().getIdCampania(), inscripcionSelec.getId()
						.getIdGerentePublico(), Constantes.PROCESO3,
						Constantes.P3_CUANTITATIVA_METAS_JI);

				flujoService.atenderFlujo(idDetalle, userSesion.getUsuario());
				msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "EXITO",
						"Se ha procesado la Evaluación Cuantitativa de Metas para el Gerente Público.");
			}
		} catch (Exception e) {
			logger.info(this.getClass().getName() + ": ERROR AL ATENDER FLUJO");
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ERROR",
					"Ha ocurrido un error.");
		}
		FacesContext.getCurrentInstance().addMessage(null, msg);
		limpiar();
	}

	public boolean validarAtenderFlujo() {

		if (inscripcionSelec == null) {
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
					"Por favor, salga del sistema e inicie sesión nuevamente.");
			return false;
		}

		if (verificarRegistroEvaluacion()) {
			msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "ADVERTENCIA",
					"Para continuar debe ingresar la evaluación de anual para todos los registros.");
			return false;
		}

		return true;
	}

	public boolean verificarRegistroEvaluacion() {

		Integer total = evaluacionMetasService
				.getCantidadCuantitativa(inscripcionSelec.getId());

		Integer conEvaluacion = evaluacionMetasService
				.getCantidadCuantitativaJI(inscripcionSelec.getId());

		if (total == conEvaluacion)
			return false;
		else
			return true;
	}

}
