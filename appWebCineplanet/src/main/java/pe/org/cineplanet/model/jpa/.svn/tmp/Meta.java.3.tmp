package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
<<<<<<< .mine
		@NamedQuery(name = "Meta.getListByCampaniaAndGerente", query = "SELECT m.id, m.tipo, m.denominacion, m.relacionPOI, m.peso, m.aprobacion, m.observacion, m.estado "
=======
		@NamedQuery(name = "Meta.getListMeta", query = "SELECT m "
				+ "FROM Meta m " 
				+ "ORDER BY m.id.idMeta"),
		@NamedQuery(name = "Meta.getMaxId", query = "SELECT max(m.id.idMeta) "
>>>>>>> .r976
				+ "FROM Meta m "
				+ "WHERE m.id.idCampania =:idCampania AND m.id.idGerentePublico =:idGerente AND m.estado =:estado"),
		@NamedQuery(name = "Meta.getListByCampaniaAndGerente", query = "SELECT m.id, m.tipo, m.denominacion, m.relacionPOI, m.peso, m.aprobacion, m.observacion, m.fechaFinMeta, m.estado "
				+ "FROM Meta m "
				+ "WHERE m.id.idCampania =:idCampania AND m.id.idGerentePublico =:idGerente AND m.estado =:estado "
				+ "ORDER BY m.tipo, m.id.idMeta"),
		@NamedQuery(name = "Meta.getListByCampaniaAndGerenteAndAprobacion", query = "SELECT m.id, m.tipo, m.denominacion, m.relacionPOI, m.peso, m.aprobacion, m.observacion, m.fechaFinMeta, m.estado "
				+ "FROM Meta m "
				+ "WHERE m.id.idCampania =:idCampania AND m.id.idGerentePublico =:idGerente AND m.estado =:estado AND aprobacion =:aprobacion "
				+ "ORDER BY m.tipo, m.id.idMeta") })
public class Meta implements Serializable {

	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private MetaPK id;
	@Column(length = 300)
	private String denominacion;
	@Column(length = 300)
	private String relacionPOI;
	@Column
	private Integer peso;
	@Column
	private String tipo;
	@Column
	private boolean aprobacion;
	@Column(length = 300)
	private String observacion;
	@Column
	@Temporal(TemporalType.DATE)
	private Date fechaFinMeta;
	@Column
	private String usuarioRegistra;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@Column
	private String estado;
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumns({
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idGerentePublico", referencedColumnName = "idGerentePublico", insertable = false, updatable = false) })
	private Inscripcion inscripcion;

	public Meta() {
		super();
	}

	public MetaPK getId() {
		return id;
	}

	public void setId(MetaPK id) {
		this.id = id;
	}

	public String getDenominacion() {
		return denominacion;
	}

	public void setDenominacion(String denominacion) {
		this.denominacion = denominacion;
	}

	public String getRelacionPOI() {
		return relacionPOI;
	}

	public void setRelacionPOI(String relacionPOI) {
		this.relacionPOI = relacionPOI;
	}

	public Integer getPeso() {
		return peso;
	}

	public void setPeso(Integer peso) {
		this.peso = peso;
	}

	public String getTipo() {
		return tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	public boolean isAprobacion() {
		return aprobacion;
	}

	public void setAprobacion(boolean aprobacion) {
		this.aprobacion = aprobacion;
	}

	public String getObservacion() {
		return observacion;
	}

	public void setObservacion(String observacion) {
		this.observacion = observacion;
	}

	public String getUsuarioRegistra() {
		return usuarioRegistra;
	}

	public void setUsuarioRegistra(String usuarioRegistra) {
		this.usuarioRegistra = usuarioRegistra;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public Inscripcion getInscripcion() {
		return inscripcion;
	}

	public void setInscripcion(Inscripcion inscripcion) {
		this.inscripcion = inscripcion;
	}

	public Date getFechaFinMeta() {
		return fechaFinMeta;
	}

	public void setFechaFinMeta(Date fechaFinMeta) {
		this.fechaFinMeta = fechaFinMeta;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Meta other = (Meta) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Meta [id=");
		builder.append(id);
		builder.append(", denominacion=");
		builder.append(denominacion);
		builder.append(", relacionPOI=");
		builder.append(relacionPOI);
		builder.append(", peso=");
		builder.append(peso);
		builder.append(", tipo=");
		builder.append(tipo);
		builder.append(", aprobacion=");
		builder.append(aprobacion);
		builder.append(", observacion=");
		builder.append(observacion);
		builder.append(", fechaFinMeta=");
		builder.append(fechaFinMeta);
		builder.append(", usuarioRegistra=");
		builder.append(usuarioRegistra);
		builder.append(", usuarioModifica=");
		builder.append(usuarioModifica);
		builder.append(", fechaCreacion=");
		builder.append(fechaCreacion);
		builder.append(", fechaModificacion=");
		builder.append(fechaModificacion);
		builder.append(", estado=");
		builder.append(estado);
		builder.append(", inscripcion=");
		builder.append(inscripcion);
		builder.append("]");
		return builder.toString();
	}

}
