package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
		@NamedQuery(name = "Mensaje.getAllListaMensaje", query = "SELECT c "
				+ "FROM Mensaje c WHERE c.estado =:estado ORDER BY c.id.idMensaje "),
		@NamedQuery(name = "Mensaje.getListaMensaje", query = "SELECT c "
				+ "FROM Mensaje c "
				+ "WHERE c.id.idActividad=:idAct AND c.id.idProceso=:idProceso AND c.id.idCampania=:idCampania AND c.estado =:estado ORDER BY c.id.idMensaje "),
		@NamedQuery(name = "Mensaje.getListaMensajeTipo", query = "SELECT c "
				+ "FROM Mensaje c "
				+ "WHERE c.id.idActividad=:idAct AND c.id.idProceso=:idProceso AND c.id.idCampania=:idCampania and c.tipo =:tipo AND c.estado =:estado ORDER BY c.id.idMensaje "),
		@NamedQuery(name = "Mensaje.getMensaje", query = "SELECT c "
				+ "FROM Mensaje c "
				+ "WHERE c.estado =:estado AND c.id.idActividad=:act AND c.id.idProceso=:pro"),
		@NamedQuery(name = "Mensaje.getMensajePrincipal", query = "SELECT m "
				+ "FROM Mensaje m "
				+ "WHERE m.id.idActividad=:idAct AND m.id.idProceso=:idProceso AND m.id.idCampania=:idCampania AND m.tipo =:tipo AND m.estado =:estado ") })
public class Mensaje implements Serializable {

	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private MensajePK id;
	@Column
	private String titulo;
	@Column(length = 4000)
	private String cuerpo;
	@Column
	private Integer cantidad;
	@Column
	private String tipo;
	@Column
	private String estado;
	@Column
	private String usuarioRegistra;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumns({
			@JoinColumn(name = "idActividad", referencedColumnName = "idActividad", insertable = false, updatable = false),
			@JoinColumn(name = "idProceso", referencedColumnName = "idProceso", insertable = false, updatable = false) })
	private Actividad actividad;
	@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false)
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	private Campania campania;

	public Mensaje() {
		super();
	}

	public MensajePK getId() {
		return id;
	}

	public void setId(MensajePK id) {
		this.id = id;
	}

	public String getTitulo() {
		return titulo;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	public String getCuerpo() {
		return cuerpo;
	}

	public void setCuerpo(String cuerpo) {
		this.cuerpo = cuerpo;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public String getUsuarioRegistra() {
		return usuarioRegistra;
	}

	public void setUsuarioRegistra(String usuarioRegistra) {
		this.usuarioRegistra = usuarioRegistra;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public Actividad getActividad() {
		return actividad;
	}

	public void setActividad(Actividad actividad) {
		this.actividad = actividad;
	}

	public Integer getCantidad() {
		return cantidad;
	}

	public void setCantidad(Integer cantidad) {
		this.cantidad = cantidad;
	}

	public String getTipo() {
		return tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	public Campania getCampania() {
		return campania;
	}

	public void setCampania(Campania campania) {
		this.campania = campania;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Mensaje other = (Mensaje) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(cuerpo);
		return builder.toString();
	}

}
