package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
		@NamedQuery(name = "PlanMetas.getListPlanMetas", query = "SELECT p "
				+ "FROM PlanMetas p ORDER BY p.id.idMeta"),
		@NamedQuery(name = "PlanMetas.getCantidadPlanesDesaprobados", query = "SELECT COUNT(m.id.idMeta) "
				+ "FROM PlanMetas m "
				+ "WHERE m.id.idCampania =:idCampania AND m.id.idGerentePublico =:idGerente "
				+ "AND m.aprobacion =:aprobacion AND m.estado =:estado"),
		@NamedQuery(name = "PlanMetas.getListByCampaniaAndGerenteAndAprobacion", query = "SELECT p.meta.id, p.meta.tipo, p.meta.denominacion, p.meta.relacionPOI, p.meta.peso, p.meta.fechaFinMeta, p.meta.aprobacion, p.meta.observacion, p.meta.estado, "
				+ "p.id, p.descripcionPlan, p.aprobacion, p.observacion, p.estado "
				+ "FROM PlanMetas p "
				+ "WHERE p.id.idCampania =:idCampania "
				+ "AND p.id.idGerentePublico =:idGerente "
				+ "AND p.aprobacion =:aprobacion AND p.estado =:estado "
				+ "ORDER BY p.meta.tipo ASC"),
		@NamedQuery(name = "PlanMetas.getListByCampaniaAndGerente", query = "SELECT p.meta.id, p.meta.tipo, p.meta.denominacion, p.meta.relacionPOI, p.meta.peso, p.meta.aprobacion, p.meta.observacion, p.meta.estado, "
				+ "p.id, p.descripcionPlan, p.aprobacion, p.observacion, p.estado, p.meta.fechaFinMeta "
				+ "FROM PlanMetas p "
				+ "WHERE p.id.idCampania =:idCampania "
				+ "AND p.id.idGerentePublico =:idGerente "
				+ "AND p.estado =:estado " + "ORDER BY p.meta.tipo ASC") })
public class PlanMetas implements Serializable {

	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private PlanMetasPK id;
	@Column(length = 500)
	private String descripcionPlan;
	@Column
	private boolean aprobacion;
	@Column(length = 4000)
	private String observacion;
	@Column
	private String usuarioRegistra;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@Column
	private String estado;
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumns({
			@JoinColumn(name = "idMeta", referencedColumnName = "idMeta", insertable = false, updatable = false),
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idGerentePublico", referencedColumnName = "idGerentePublico", insertable = false, updatable = false) })
	private Meta meta;

	public PlanMetas() {
		super();
	}

	public boolean isAprobacion() {
		return aprobacion;
	}

	public void setAprobacion(boolean aprobacion) {
		this.aprobacion = aprobacion;
	}

	public PlanMetasPK getId() {
		return id;
	}

	public void setId(PlanMetasPK id) {
		this.id = id;
	}

	public String getDescripcionPlan() {
		return descripcionPlan;
	}

	public void setDescripcionPlan(String descripcionPlan) {
		this.descripcionPlan = descripcionPlan;
	}

	public String getUsuarioRegistra() {
		return usuarioRegistra;
	}

	public void setUsuarioRegistra(String usuarioRegistra) {
		this.usuarioRegistra = usuarioRegistra;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public Meta getMeta() {
		return meta;
	}

	public void setMeta(Meta meta) {
		this.meta = meta;
	}

	public String getObservacion() {
		return observacion;
	}

	public void setObservacion(String observacion) {
		this.observacion = observacion;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PlanMetas other = (PlanMetas) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(descripcionPlan);
		return builder.toString();
	}

}
