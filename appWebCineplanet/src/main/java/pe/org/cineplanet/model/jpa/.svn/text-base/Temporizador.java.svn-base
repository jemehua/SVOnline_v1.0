package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
		@NamedQuery(name = "Temporizador.getAllListaTemporizador", query = "SELECT t FROM Temporizador t WHERE t.estado =:estado "),
		@NamedQuery(name = "Temporizador.getListaTemporizadorCampania", query = "SELECT t "
				+ "FROM Temporizador t "
				+ "WHERE t.id.idCampania =:idCampania AND t.estado =:estado "),
		@NamedQuery(name = "Temporizador.getListaTempByProcesoCampania", query = "SELECT t "
				+ "FROM Temporizador t "
				+ "WHERE t.id.idCampania =:idCampania AND t.id.idProceso =:idProceso AND t.estado =:estado ORDER BY t.id.idActividad"),
		@NamedQuery(name = "Temporizador.getListaTemporizadorCronograma", query = "SELECT t "
				+ "FROM Temporizador t "
				+ "WHERE t.id.idCampania =:idCampania AND  t.id.idProceso =:idProceso AND t.id.idCronograma =:idCronograma AND t.estado =:estado ORDER BY t.id.idActividad"),
		@NamedQuery(name = "Temporizador.getListaTemporizadorCampaniaAndProceso", query = "SELECT t "
				+ "FROM Temporizador t "
				+ "WHERE t.id.idCampania =:idCampania AND  t.id.idProceso =:idProceso ") })
public class Temporizador implements Serializable {

	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private TemporizadorPK id;
	@Column
	private Integer cantidadDias;
	@Column
	private Integer cantidadEnvios;
	@Column
	private String usuarioRegistra;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@Column
	private String estado;
	@ManyToOne(optional = false)
	@JoinColumns({
			@JoinColumn(name = "idCronograma", referencedColumnName = "idCronograma", insertable = false, updatable = false),
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idProceso", referencedColumnName = "idProceso", insertable = false, updatable = false) })
	private Cronograma cronograma;
	@ManyToOne(optional = false)
	@JoinColumns({
			@JoinColumn(name = "idActividad", referencedColumnName = "idActividad", insertable = false, updatable = false),
			@JoinColumn(name = "idProceso", referencedColumnName = "idProceso", insertable = false, updatable = false) })
	private Actividad actividad;

	public Temporizador() {
		super();
	}

	public TemporizadorPK getId() {
		return id;
	}

	public void setId(TemporizadorPK id) {
		this.id = id;
	}

	public Integer getCantidadDias() {
		return cantidadDias;
	}

	public void setCantidadDias(Integer cantidadDias) {
		this.cantidadDias = cantidadDias;
	}

	public Integer getCantidadEnvios() {
		return cantidadEnvios;
	}

	public void setCantidadEnvios(Integer cantidadEnvios) {
		this.cantidadEnvios = cantidadEnvios;
	}

	public String getUsuarioRegistra() {
		return usuarioRegistra;
	}

	public void setUsuarioRegistra(String usuarioRegistra) {
		this.usuarioRegistra = usuarioRegistra;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public Cronograma getCronograma() {
		return cronograma;
	}

	public void setCronograma(Cronograma cronograma) {
		this.cronograma = cronograma;
	}

	public Actividad getActividad() {
		return actividad;
	}

	public void setActividad(Actividad actividad) {
		this.actividad = actividad;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Temporizador other = (Temporizador) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Temporizador [id=");
		builder.append(id);
		builder.append("]");
		return builder.toString();
	}
}
