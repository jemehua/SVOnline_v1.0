package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
		@NamedQuery(name = "Notificacion.getListByCampaniaAndGerenteAndProcesoAndActividad", query = "SELECT n.id, n.usuarioRegistra, n.fechaCreacion, n.receptor "
				+ "FROM Notificacion n where n.id.idActividad=:idAct AND n.id.idProceso=:idProceso AND n.id.idCampania=:idCampania "
				+ "AND n.id.idGerentePublico=:idGerente AND n.estado =:estado ORDER BY n.id.idNotificacion "),
		@NamedQuery(name = "Notificacion.getCountByDetalleFlujoPkAndReceptor", query = "SELECT COUNT(n.id.idNotificacion) "
				+ "FROM Notificacion n WHERE n.id.idActividad=:idAct AND n.id.idProceso=:idProceso AND n.id.idCampania=:idCampania "
				+ "AND n.id.idGerentePublico=:idGerente AND n.estado =:estado AND n.receptor =:receptor " 
				+ "ORDER BY n.id.idNotificacion "),
		@NamedQuery(name = "Notificacion.getMaxId", query = "SELECT max(n.id.idNotificacion) "
				+ "FROM Notificacion n "
				+ "WHERE n.id.idActividad=:idAct AND "
				+ "n.id.idProceso=:idProceso AND n.id.idCampania=:idCampania "
				+ "AND n.id.idGerentePublico=:idGerente AND n.estado =:estado") })
public class Notificacion implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private NotificacionPK id;
	@Column(length = 2000)
	private String observacion;
	@Column(length = 2)
	private String receptor;
	@Column
	private String usuarioRegistra;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@Column
	private String estado;
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumns({
			@JoinColumn(name = "idMensaje", referencedColumnName = "idMensaje", insertable = false, updatable = false),
			@JoinColumn(name = "idActividad", referencedColumnName = "idActividad", insertable = false, updatable = false),
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idProceso", referencedColumnName = "idProceso", insertable = false, updatable = false) })
	private Mensaje mensaje;
	@ManyToOne(fetch = FetchType.LAZY,  optional = false)
	@JoinColumns({
			@JoinColumn(name = "idActividad", referencedColumnName = "idActividad", insertable = false, updatable = false),
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idGerentePublico", referencedColumnName = "idGerentePublico", insertable = false, updatable = false),
			@JoinColumn(name = "idProceso", referencedColumnName = "idProceso", insertable = false, updatable = false) })
	private DetalleFlujo detalleFlujo;

	public Notificacion() {
		super();
	}

	public String getReceptor() {
		return receptor;
	}

	public void setReceptor(String receptor) {
		this.receptor = receptor;
	}

	public String getObservacion() {
		return observacion;
	}

	public void setObservacion(String observacion) {
		this.observacion = observacion;
	}

	public NotificacionPK getId() {
		return id;
	}

	public void setId(NotificacionPK id) {
		this.id = id;
	}

	public String getUsuarioRegistra() {
		return usuarioRegistra;
	}

	public void setUsuarioRegistra(String usuarioRegistra) {
		this.usuarioRegistra = usuarioRegistra;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}

	public DetalleFlujo getDetalleFlujo() {
		return detalleFlujo;
	}

	public void setDetalleFlujo(DetalleFlujo detalleFlujo) {
		this.detalleFlujo = detalleFlujo;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Notificacion other = (Notificacion) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(observacion);
		return builder.toString();
	}

}
