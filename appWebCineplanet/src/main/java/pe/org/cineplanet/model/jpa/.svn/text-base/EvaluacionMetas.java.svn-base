package gob.servir.desempenio.model;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * 
 * @author Hever Pumallihua
 */
@Entity
@NamedQueries({
		@NamedQuery(name = "EvaluacionMetas.getListEvaluacionMetas", query = "SELECT e "
				+ "FROM EvaluacionMetas e"),
		@NamedQuery(name = "EvaluacionMetas.getListNotasEvaluacionMetas", query = "SELECT e "
				+ "FROM EvaluacionMetas e "
				+ "WHERE e.id.idCampania =:idCampania AND e.id.idGerentePublico =:idGerente AND e.estado =:estado"),
		@NamedQuery(name = "EvaluacionMetas.getCantidadCuantitativa", query = "SELECT COUNT(e.id.idMeta) "
				+ "FROM EvaluacionMetas e "
				+ "WHERE e.id.idCampania =:idCampania AND e.id.idGerentePublico =:idGerente AND e.estado =:estado"),
		@NamedQuery(name = "EvaluacionMetas.getCantidadCualitativa", query = "SELECT COUNT(e.id.idMeta) "
				+ "FROM EvaluacionMetas e "
				+ "WHERE e.id.idCampania =:idCampania AND e.id.idGerentePublico =:idGerente AND e.estado =:estado AND e.descripcion IS NOT NULL AND e.porcentajeAvance IS NOT NULL"),
		@NamedQuery(name = "EvaluacionMetas.getCantidadCuantitativaGP", query = "SELECT COUNT(e.id.idMeta) "
				+ "FROM EvaluacionMetas e "
				+ "WHERE e.id.idCampania =:idCampania AND e.id.idGerentePublico =:idGerente AND e.estado =:estado AND e.notaGP IS NOT NULL"),
		@NamedQuery(name = "EvaluacionMetas.getCantidadCuantitativaJI", query = "SELECT COUNT(e.id.idMeta) "
				+ "FROM EvaluacionMetas e "
				+ "WHERE e.id.idCampania =:idCampania AND e.id.idGerentePublico =:idGerente AND e.estado =:estado AND e.notaJI IS NOT NULL") })
public class EvaluacionMetas implements Serializable {

	private static final long serialVersionUID = 1L;
	@EmbeddedId
	private EvaluacionMetasPK id;
	@Column(length = 500)
	private String descripcion;
	@Column
	private Integer porcentajeAvance;
	@Column
	private Integer notaGP;
	@Column
	private Integer notaJI;
	@Column
	private Double promedio;
	@Column
	private Double porcentaje;
	@Column
	private String usuarioGP;
	@Column
	private String usuarioJI;
	@Column
	private String usuarioModifica;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaCreacion;
	@Column
	@Temporal(TemporalType.TIMESTAMP)
	private Date fechaModificacion;
	@Column
	private String estado;
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumns({
			@JoinColumn(name = "idMeta", referencedColumnName = "idMeta", insertable = false, updatable = false),
			@JoinColumn(name = "idCampania", referencedColumnName = "idCampania", insertable = false, updatable = false),
			@JoinColumn(name = "idGerentePublico", referencedColumnName = "idGerentePublico", insertable = false, updatable = false) })
	private PlanMetas planMetas;

	public EvaluacionMetas() {
		super();
	}

	public Double getPromedio() {
		return promedio;
	}

	public void setPromedio(Double promedio) {
		this.promedio = promedio;
	}

	public Double getPorcentaje() {
		return porcentaje;
	}

	public void setPorcentaje(Double porcentaje) {
		this.porcentaje = porcentaje;
	}

	public EvaluacionMetasPK getId() {
		return id;
	}

	public void setId(EvaluacionMetasPK id) {
		this.id = id;
	}

	public String getDescripcion() {
		return descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	public Integer getPorcentajeAvance() {
		return porcentajeAvance;
	}

	public void setPorcentajeAvance(Integer porcentajeAvance) {
		this.porcentajeAvance = porcentajeAvance;
	}

	public Integer getNotaGP() {
		return notaGP;
	}

	public void setNotaGP(Integer notaGP) {
		this.notaGP = notaGP;
	}

	public Integer getNotaJI() {
		return notaJI;
	}

	public void setNotaJI(Integer notaJI) {
		this.notaJI = notaJI;
	}

	public String getUsuarioGP() {
		return usuarioGP;
	}

	public void setUsuarioGP(String usuarioGP) {
		this.usuarioGP = usuarioGP;
	}

	public String getUsuarioJI() {
		return usuarioJI;
	}

	public void setUsuarioJI(String usuarioJI) {
		this.usuarioJI = usuarioJI;
	}

	public String getUsuarioModifica() {
		return usuarioModifica;
	}

	public void setUsuarioModifica(String usuarioModifica) {
		this.usuarioModifica = usuarioModifica;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public Date getFechaModificacion() {
		return fechaModificacion;
	}

	public void setFechaModificacion(Date fechaModificacion) {
		this.fechaModificacion = fechaModificacion;
	}

	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	public PlanMetas getPlanMetas() {
		return planMetas;
	}

	public void setPlanMetas(PlanMetas planMetas) {
		this.planMetas = planMetas;
	}

	@PrePersist
	private void putFechaCreacion() {
		setFechaCreacion(new Date(Calendar.getInstance().getTime().getTime()));
	}

	@PreUpdate
	private void putFechaModificacion() {
		setFechaModificacion(new Date(Calendar.getInstance().getTime()
				.getTime()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		EvaluacionMetas other = (EvaluacionMetas) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(descripcion);
		return builder.toString();
	}

}
